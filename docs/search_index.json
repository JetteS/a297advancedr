[
["performance.html", "Chapter 5 Performance 5.1 R’s memory management 5.2 Early advice 5.3 Vectorization 5.4 Rcpp 5.5 Linear algebra 5.6 Algorithms &amp; data structures 5.7 Exercises 5.8 Parallel", " Chapter 5 Performance Some resources used here or for further reading: Advanced R Efficient R programming The people who say that “R is just always slow” are usually not great R programmers. It is true that writing inefficient R code is easy, yet writing efficient R code is also possible when you know what you’re doing. In this chapter, you will learn how to write R(cpp) code that is fast. 5.1 R’s memory management See this new chapter of Advanced R. 5.2 Early advice 5.2.1 NEVER GROW A VECTOR Example computing the cumulative sums of a vector: x &lt;- rnorm(1e4) # Try also with n = 1e5 system.time({ current_sum &lt;- 0 res &lt;- c() for (x_i in x) { current_sum &lt;- current_sum + x_i res &lt;- c(res, current_sum) } }) #&gt; user system elapsed #&gt; 0.11 0.00 0.11 Here, at each iteration, you reallocating a vector (of increasing size). Allocation of memory takes time as well as computations. This makes your code quadratic with the size of x (if you multiply the size of x by 2, you can expect the execution time to be multiplied by 4, for large sample sizes), whereas it should be only linear. A good solution is to always pre-allocate your results (if you know the size): system.time({ current_sum &lt;- 0 res2 &lt;- double(length(x)) for (i in seq_along(x)) { current_sum &lt;- current_sum + x[i] res2[i] &lt;- current_sum } }) #&gt; user system elapsed #&gt; 0 0 0 all.equal(res2, res) #&gt; [1] TRUE If you don’t know the size of the results, you can store them in a list and merge them afterwards: system.time({ current_sum &lt;- 0 res3 &lt;- list() for (i in seq_along(x)) { current_sum &lt;- current_sum + x[i] res3[[i]] &lt;- current_sum } }) #&gt; user system elapsed #&gt; 0 0 0 all.equal(unlist(res3), res) #&gt; [1] TRUE With recent versions of R (&gt;= 3.4), you can efficiently grow a vector using system.time({ current_sum &lt;- 0 res4 &lt;- c() for (i in seq_along(x)) { current_sum &lt;- current_sum + x[i] res4[i] &lt;- current_sum } }) #&gt; user system elapsed #&gt; 0 0 0 all.equal(res4, res) #&gt; [1] TRUE Assigning to an element of a vector beyond the current length now over-allocates by a small fraction. The new vector is marked internally as growable, and the true length of the new vector is stored in the truelength field. This makes building up a vector result by assigning to the next element beyond the current length more efficient, though pre-allocating is still preferred. The implementation is subject to change and not intended to be used in packages at this time. (NEWS) An even better solution would be to avoid the loop by using a vectorized function: system.time(res5 &lt;- cumsum(x)) #&gt; user system elapsed #&gt; 0 0 0 all.equal(res5, res) #&gt; [1] TRUE x &lt;- rnorm(1e7) system.time(cumsum(x)) #&gt; user system elapsed #&gt; 0.04 0.00 0.05 As a second example, let us generate a matrix of uniform values (max changing for every column): n &lt;- 1e3 max &lt;- 1:1000 system.time({ mat &lt;- NULL for (m in max) { mat &lt;- cbind(mat, runif(n, max = m)) } }) #&gt; user system elapsed #&gt; 0.61 0.36 0.97 apply(mat, 2, max)[1:10] #&gt; [1] 0.9981759 1.9963482 2.9929098 3.9691442 4.9994119 5.9927734 6.9965449 7.9933988 #&gt; [9] 8.9886295 9.9974796 So, we can either pre-allocate a list or a matrix: system.time({ l &lt;- vector(&quot;list&quot;, length(max)) for (i in seq_along(max)) { l[[i]] &lt;- runif(n, max = max[i]) } mat2 &lt;- do.call(&quot;cbind&quot;, l) }) #&gt; user system elapsed #&gt; 0.03 0.00 0.03 apply(mat2, 2, max)[1:10] #&gt; [1] 0.9989027 1.9998001 2.9990173 3.9980387 4.9979667 5.9981613 6.9974647 7.9936673 #&gt; [9] 8.9783697 9.9938763 system.time({ mat3 &lt;- matrix(0, n, length(max)) for (i in seq_along(max)) { mat3[, i] &lt;- runif(n, max = max[i]) } }) #&gt; user system elapsed #&gt; 0.02 0.00 0.01 apply(mat3, 2, max)[1:10] #&gt; [1] 0.9993644 1.9907817 2.9998555 3.9993478 4.9961681 5.9961174 6.9840548 7.9982145 #&gt; [9] 8.9928187 9.9777455 What is nice with using a list is that you don’t need to pre-allocate. Indeed, as opposed to atomic vectors, each element of a list is in different places in memory so that you don’t have to reallocate all the data when you add an element to a list. system.time({ l &lt;- list() for (i in seq_along(max)) { l[[i]] &lt;- runif(n, max = max[i]) } mat4 &lt;- do.call(&quot;cbind&quot;, l) }) #&gt; user system elapsed #&gt; 0.01 0.00 0.02 apply(mat4, 2, max)[1:10] #&gt; [1] 0.9982181 1.9991417 2.9985030 3.9992320 4.9937580 5.9992585 6.9986020 7.9970152 #&gt; [9] 8.9991644 9.9884184 Instead of pre-allocating yourself, you can use sapply (or lapply and calling do.call() after, as previously done): system.time( mat4 &lt;- sapply(max, function(m) runif(n, max = m)) ) #&gt; user system elapsed #&gt; 0.03 0.00 0.03 apply(mat4, 2, max)[1:10] #&gt; [1] 0.9970759 1.9993228 2.9996546 3.9987824 4.9993423 5.9865678 6.9997386 7.9925231 #&gt; [9] 8.9617833 9.9963615 Don’t listen to people telling you that sapply() is a vectorized operation that is so much faster than loops. 5.2.2 Use the right function Often, in order to optimize your code, you can simply find the right function to do what you need to do. For example, using rowMeans(x) instead of apply(x, 1, mean) can save you a lot of time. For example, if you want more efficient functions that apply to rows and columns of matrices, you can check package {matrixStats}. Another example is when reading large text files; in such cases, prefer using data.table::fread() rather than read.table(). Generally, packages that uses C/Rcpp are efficient. 5.2.3 Do not try to optimize everything “Programmers waste enormous amounts of time thinking about, or worrying about, the speed of noncritical parts of their programs, and these attempts at efficiency actually have a strong negative impact when debugging and maintenance are considered.” — Donald Knuth. If you try to optimize each and every part of your code, you will end up losing a lot of time writing it and it will probably less readable. R is great at prototyping quickly because you can write code in a concise and easy way. Begin by doing just that. If performance matters, then profile your code to see which part of your code is taking too much time and optimize only this part! Learn more on how to profile your code in RStudio in this article. 5.3 Vectorization See this great blog post by Noam Ross to understand vectorization. 5.3.1 Exercise Monte-Carlo integration (example from book Efficient R programming) Suppose we wish to estimate the integral \\(\\int_0^1 x^2 dx\\) using a Monte-Carlo method. Essentially, we throw darts at the curve and count the number of darts that fall below the curve (as in the following figure). Monte Carlo Integration pseudo-code Initialize: hits = 0 for i in 1:N \\(~~\\) Generate two random numbers, \\(U_1\\) and \\(U_2\\), between 0 and 1 \\(~~\\) If \\(U_2 &lt; U_1^2\\), then hits = hits + 1 end for Area estimate = hits / N Naively implementing this Monte-Carlo algorithm in R would typically lead to something like: monte_carlo &lt;- function(N) { hits &lt;- 0 for (i in seq_len(N)) { u1 &lt;- runif(1) u2 &lt;- runif(1) if (u1 ^ 2 &gt; u2) { hits &lt;- hits + 1 } } hits / N } This takes a few seconds for N = 1e6: N &lt;- 1e6 system.time(monte_carlo(N)) #&gt; user system elapsed #&gt; 2.63 0.00 2.63 Your task: Find a vectorized solution for this problem: system.time(monte_carlo_vec(N)) #&gt; user system elapsed #&gt; 0.07 0.00 0.06 5.4 Rcpp See this presentation. You have this data and this working code (a loop) that is slow mydf &lt;- readRDS(system.file(&quot;extdata/one-million.rds&quot;, package = &quot;advr38pkg&quot;)) QRA_3Dmatrix &lt;- array(0, dim = c(max(mydf$ID), max(mydf$Volume), 2)) for (i in seq_len(nrow(mydf))) { # Row corresponds to IDcell row &lt;- mydf[[i, 1]] # Column corresponds to the volume class column &lt;- mydf[[i, 3]] # Number of events, initially zero, then +1 QRA_3Dmatrix[row, column, 1] &lt;- QRA_3Dmatrix[row, column, 1] + 1 # Sum energy QRA_3Dmatrix[row, column, 2] &lt;- QRA_3Dmatrix[row, column, 2] + 1 - 1.358 / (1 + exp( (1000 * mydf[[i, 2]] - 129000) / 120300 )) } Rewrite this for-loop with Rcpp. You can also try to use {dplyr} for this problem. 5.5 Linear algebra In R, prefer using crossprod(X) and tcrossprod(X) instead of t(X) %*% X and X %*% t(X). Also using A %*% (B %*% y) and solve(A, y) will be faster than A %*% B %*% y and solve(A) %*% y. Don’t re-implement linear algebra operations (such as matrix products) yourself. There exist some highly optimized libraries for this. If you want to use linear algebra in Rcpp, try RcppArmadillo or RcppEigen. If you want to use some optimized multi-threaded linear library, you can try Microsoft R Open. 5.5.1 Exercises Compute the Euclidean distances between each of row of X and each row of Y: set.seed(1) X &lt;- matrix(rnorm(1000), ncol = 5) Y &lt;- matrix(rnorm(5000), ncol = 5) A naive implementation would be: system.time({ dist &lt;- matrix(NA_real_, nrow(X), nrow(Y)) for (i in seq_len(nrow(X))) { for (j in seq_len(nrow(Y))) { dist[i, j] &lt;- sqrt(sum((X[i, ] - Y[j, ])^2)) } } }) #&gt; user system elapsed #&gt; 0.22 0.00 0.22 A possible faster solution takes #&gt; user system elapsed #&gt; 0.02 0.00 0.02 Rewrite this problem to use linear algebra instead of a loop (Hint: resize the 3-dimensional arrays as 2D matrices): N &lt;- 1e5 x &lt;- rnorm(N*3*3); dim(x) &lt;- c(N,3,3) y &lt;- rnorm(N*3*3); dim(y) &lt;- c(N,3,3) system.time({ gg &lt;- 0 for (n in 1:dim(x)[1]){ gg &lt;- gg + t(x[n,,]) %*% y[n,,] } }) #&gt; user system elapsed #&gt; 0.51 0.00 0.52 A possible faster solution takes #&gt; user system elapsed #&gt; 0 0 0 5.6 Algorithms &amp; data structures Sometimes, getting the right data structure (e.g. using a matrix instead of a data frame or integers instead of characters) can save you some computation time. Is your algorithm doing some redundant computations making it e.g. quadratic instead of linear with respect to the dimension of your data? See exercises (section 5.7) for some insights. You can also find a detailed example in this blog post. 5.7 Exercises Generate \\(10^8\\) (begin with \\(10^4\\)) steps of the process described by the formula:\\[X(0)=0\\]\\[X(t+1)=X(t)+Y(t)\\] where \\(Y(t)\\) are independent random variables with the distribution \\(N(0,1)\\). Then, calculate in what percentage of indices \\(t\\) the value of \\(X(t)\\) was negative. You don’t need to store values of \\(X\\) if you don’t want to. What would be the benefit of writing an Rcpp function over a simple vectorized R function? set.seed(1) system.time(p &lt;- advr38pkg::random_walk_neg_prop(1e7)) #&gt; user system elapsed #&gt; 0.39 0.01 0.41 p #&gt; [1] 0.3400444 mat &lt;- as.matrix(mtcars) ind &lt;- seq_len(nrow(mat)) mat_big &lt;- mat[rep(ind, 1000), ] ## 1000 times bigger dataset last_row &lt;- mat_big[nrow(mat_big), ] Speed up these loops: system.time({ for (j in 1:ncol(mat_big)) { for (i in 1:nrow(mat_big)) { mat_big[i, j] &lt;- 10 * mat_big[i, j] * last_row[j] } } }) #&gt; user system elapsed #&gt; 0.38 0.00 0.37 Why colSums() on a whole matrix is faster than on only half of it? m0 &lt;- matrix(rnorm(1e6), 1e3, 1e3) microbenchmark::microbenchmark( colSums(m0[, 1:500]), colSums(m0) ) #&gt; Unit: microseconds #&gt; expr min lq mean median uq max neval #&gt; colSums(m0[, 1:500]) 1358.3 1706.3 2167.792 1749.00 1840.05 23087.2 100 #&gt; colSums(m0) 685.5 735.2 779.969 753.05 801.50 1155.3 100 Try to speed up this code by vectorizing it first. Then, recode it in Rcpp and benchmark all the solutions you came up with. M &lt;- 50 step1 &lt;- runif(M) A &lt;- rnorm(M) N &lt;- 1e4 tau &lt;- matrix(0, N + 1, M) tau[1, ] &lt;- A for (j in 1:M) { for (i in 2:nrow(tau)) { tau[i, j] &lt;- tau[i - 1, j] + step1[j] * 1.0025^(i - 2) } } Make a fast function that counts the number of elements between a sequence of breaks. Can you do it in base R? Try also implementing it in Rcpp. How can you implement a solution whose computation time doesn’t depend on the number of breaks? [Which are the special cases that you should consider?] x &lt;- sample(10, size = 1e4, replace = TRUE) breaks &lt;- c(1, 3, 9, 9.5, 10) table(cut(x, breaks)) #&gt; #&gt; (1,3] (3,9] (9,9.5] (9.5,10] #&gt; 2006 5997 0 944 hist(x, breaks, plot = FALSE)$counts # includes first break #&gt; [1] 3059 5997 0 944 advr38pkg::count_by_breaks(x, breaks) #&gt; [1] 2006 5997 0 944 advr38pkg::count_by_breaks_fast(x, breaks) #&gt; [1] 2006 5997 0 944 microbenchmark::microbenchmark( table(cut(x, breaks)), hist(x, breaks, plot = FALSE)$counts, advr38pkg::count_by_breaks(x, breaks), advr38pkg::count_by_breaks_fast(x, breaks) ) #&gt; Unit: microseconds #&gt; expr min lq mean median uq max #&gt; table(cut(x, breaks)) 720.3 761.35 866.839 857.4 902.35 1337.3 #&gt; hist(x, breaks, plot = FALSE)$counts 279.9 308.95 364.181 344.6 375.55 698.1 #&gt; advr38pkg::count_by_breaks(x, breaks) 254.7 267.65 526.648 323.3 382.40 19095.0 #&gt; advr38pkg::count_by_breaks_fast(x, breaks) 145.6 160.75 183.921 183.0 193.90 321.8 #&gt; neval #&gt; 100 #&gt; 100 #&gt; 100 #&gt; 100 x2 &lt;- sample(10, size = 1e5, replace = TRUE) breaks2 &lt;- seq(0, 10, length.out = 100) microbenchmark::microbenchmark( advr38pkg::count_by_breaks(x2, breaks), advr38pkg::count_by_breaks_fast(x2, breaks), advr38pkg::count_by_breaks(x2, breaks2), advr38pkg::count_by_breaks_fast(x2, breaks2) ) #&gt; Unit: milliseconds #&gt; expr min lq mean median #&gt; advr38pkg::count_by_breaks(x2, breaks) 2.3871 2.53285 2.963034 2.92545 #&gt; advr38pkg::count_by_breaks_fast(x2, breaks) 1.1123 1.17300 1.342122 1.21525 #&gt; advr38pkg::count_by_breaks(x2, breaks2) 81.7814 106.76240 108.585852 108.07800 #&gt; advr38pkg::count_by_breaks_fast(x2, breaks2) 1.1121 1.20900 1.291946 1.25475 #&gt; uq max neval #&gt; 3.18100 7.8208 100 #&gt; 1.25870 6.2009 100 #&gt; 109.72445 133.1644 100 #&gt; 1.32105 1.9378 100 An R user wants to implement some sampling on a sparse matrix and provides this working code: library(Matrix) N &lt;- 100 m &lt;- Matrix(0, nrow = N, ncol = N) for (j in 1:N) { cols &lt;- sample((1:N)[-j], 2) # 2 columns != j m[j, cols] &lt;- 1 } This code is slow; can you find two major reasons why? How can you more efficiently assign 1s? Can you use sampling with replacement (which can be easily vectorized) in this example? Implement faster solutions in R and Rcpp. Make a fast function that returns all prime numbers up to a number N. N &lt;- 1e6 system.time( primes &lt;- advr38pkg::AllPrimesUpTo(N) ) #&gt; user system elapsed #&gt; 0.04 0.00 0.03 plot(primes, pch = 20, cex = 0.5) 5.8 Parallel I basically always use foreach and recommend to do so. See my guide to parallelism in R with foreach. Just remember to optimize your code before trying to parallelize it. Try to parallelize some of your best solutions for the previous exercises. "]
]
