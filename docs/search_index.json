[["rmarkdown.html", "Chapter 4 R Markdown 4.1 R Markdown basics 4.2 Producing a complete report 4.3 Summary Useful resources", " Chapter 4 R Markdown When writing package documentations with roxygen2, building websites for R packages with pkgdown, or building a personal website, you will not be able to get past R Markdown. R Markdown is rightly used everywhere; Indeed, these materials are written in R Markdown. But what is R Markdown? R Markdown is a file format for making reproducible, dynamic documents with R. A single R Markdown file can be used to save and execute code, and to generate high quality reports that can be shared with an audience. An R Markdown document is written in Markdown and contains plain text and embedded R code and results. In this chapter, we will take a closer look at R Markdown. What is Markdown? Markdown is a simple markup language with plain text formatting syntax. And what is a markup language? It is a text-encoding system: A set of symbols is inserted in a text document to control its structure, formatting, etc. You probably know HTML; the standard markup language for creating Web pages. The extension of a Markdown file is typically .md, but a Markdown document can be converted to many formats (including HTML, PDF, and MS_Word). The original version of Markdown was created by John Gruber in 2004; completely independent of R. John Gruber’s aim was to create a markup language that was easy to read and easy to write. He may have overshot the target; The original version of Markdown was often found overly simple and not suitable to write highly technical documents. Fortunately, two years later, John MacFarlane created the universal document converter pandoc. In this connection, the Markdown syntax was significantly enriched, making Markdown an excellent authoring framework for data science. Adding R to Markdown R Markdown is an extension of the markdown syntax that enables R code to be embedded in the document. The typical extension for an R Markdown file is .Rmd. Converting an R Markdown document to a specific output format requires two steps: The .Rmd file needs to be send to knitr, which executes the R code chunks and creates a new markdown (.md) document including the R code and its output. Afterwards, the markdown file generated by knitr needs to be processed by pandoc, which is responsible for creating the finished file. Fortunately, we don’t have to perform these steps every time we want to render an R Markdown document. The package rmarkdown, which is automatically installed and loaded in RStudio, provides a function that performs the processing steps for you; the function is called render(). Moreover, RStudio has a Knit button () at the top of the Source pane that enables you to render an .Rmd file and preview it with a single click (or keyboard shortcut Ctrl+Shift+K / Shift+Command+K). The only drawback of using R Markdown is that help is not always available through the help() function. R Markdown integrates a variety of R packages and external tools; making it difficult to provide help for everything. Instead, you should consider the R Markdown Reference Guide, the R Markdown Cheat Sheet (an older version can be found here), and the rmarkdown website, which is also made with R Markdown (of course). 4.1 R Markdown basics Now that we have established what R Markdown is and what it can be used for, let us look at what a R Markdown document looks like. To create a new R Markdown document, you can either Go to File -&gt; New File -&gt; R Markdown… Click on in the upper-left corner of the RStudio menu (above the Source pane) and select R Markdown… Open a blank text document and save this file with the extension .Rmd, i.e. [file_name].Rmd. Click on New Blank File in the Files tab of the Output pane and select R Markdown… to create a file in the current directory. Your browser does not support the video tag. Using options one and two will open a pop-up window that looks like this: Figure 4.1: How to create an R Markdown file If you want to create an empty document without any pre-defined options, click on Create Empty Document in the lower-left corner. You can also create an HTML, PDF, or Word document, presentations (ioslides, Slidy, Beamer or PowerPoint), interactive Shiny documents or presentations, or open R Markdown templates using the menu to the left and the suggested default output formats. Finally, you can specify a title, author and date. Once you have selected the desired output format and updated the title, author and date, select OK. RStudio will now open an R Markdown document that looks similar to the one shown below: The document contains three important types of content: An (optional) YAML header Chunks of R code Text mixed with simple text formatting In the following, we will explore each component in more detail. The YAML header An R Markdown document starts with an (optional) YAML header surrounded by a line of three hyphens ---. This is where you can specify (or update) metadata about the document and rendering instructions. When you create an R Markdown file using the wizard shown in Figure 4.1, RStudio writes the YAML header for you. However, you can still update the existing options or add other metadata. Some commonly used YAML metadata options are: title : A descriptive main title. author : Name of the author(s). You can use lists for multiple authors and for adding other metadata, for example: author: - Name_1 - Name_2 author: - name: Name_1 - affiliation: University of Somewhere - name: Name_2 - affiliation: Uiversity of Somewhere else date : The date shown in the document. You can write a date or execute R code to update the date automatically. date: &quot;`r format(Sys.time(), &#39;%d %B, %Y&#39;)`&quot; date: &quot;`r lubridate::today()`&quot; abstract : A summary of the analyses. Multiple paragraphs can be specified but they must be indented and preceded by |: abstract: | The first paragraph of this abstract. The second paragraph of the abstract. output : Document specific YAML options. The first option specified here needs to be the document type (e.g. html_document in the example above). A full list of supported document types can be found in colored box at the end of this section. Each output format can be accompanied with several format options. All these format options must be indented, e.g. output: html_document: toc: true Some of the most commonly used document specific options are: toc : true/false to show table of contents. toc_debth : A number determining how many subheadings will be visible in the table of contents. Defaults to three. toc_float : true/false determining whether the table of contents stays visible when scrolling down. theme : The overall look of the document. You can see a list of available R Markdown Themes in Appendix F R Markdown Themes of rstudio4edu by Desirée De Leon and Alison Hill, or in the R Markdown Theme Gallery created by Andrew Zieffler. Supported document types: beamer_presentation context_document github_document html_document ioslides_presentation latex_document md_document odt_document pdf_document powerpoint_presentation rtf_document slidy_presentation word_document Other extension packages provide more output formats. However, if you want to use an output format from an extension package, you have to include the package name in the YAML header: output: tufte::tufte_html R code chunks Following the metadata is the body of the R Markdown file. The second important type of content is found in the body; namely chunks of R code surrounded by ```{r} and ```. Following the three ```in the beginning is {r}. This tells Markdown that the code chunk contains R code. Besides R, knitrcan execute code written in Python, SQL, Bash, Rcpp, Stan, JavaScript and CSS. Simply replace {r} at the top of the code chunk with the name of the desired language. You can insert a chunk in three different ways: By manually typing the chunk delimiters ```{r} and ``` By clicking the insert button icon in the editor toolbar at the top of the Source pane or by using the keyboard shortcut Ctrl+Alt+I / Command+Option+I. Even though you are working within an R Markdown document, you can still execute current line/selection of code in a code chunk using the keyboard shortcut Ctrl+Enter / Command+Return. If you want to run all code in a chunk, you can click in the upper-right corner of the code chunk or use the shortcut Ctrl+Shift+Enter / Command+Shift+Return. When you run code in a chunk, the output is displayed in the console as usual, and all objects are stored in the current environment. However, RStudio will also show the output below the code chunk: You can customise the chunk output with options specified in the chunk header ```{r}. knitr provides almost 60 options that you can use to customise code chunks. The most important options are: eval : Whether to evaluate the code and include its results. Defaults to TRUE. echo : Whether to display code along with its results. Defaults to TRUE. include : Whether to show the code and its results in the final document. Defaults to TRUE. This is used for setup code. warning : Whether to display warnings. Defaults to TRUE. error : Whether to display errors. Defaults to FALSE. message : Whether to display messages. Defaults to TRUE. tidy : Whether to reformat code in a tidy way when displaying it. Defaults to FALSE. collapse : Whether to merge text output and source code into a single code block in the output. Defaults to FALSE. results : Controls how to display the text results. Defaults to markup. cache : Whether to cache results for future renders. Defaults to FALSE. comment : Comment character to preface results with. Defaults to ##. fig.width : Width in inches for plots created in chunk. Defaults to 7. fig.height : Height in inches for plots created in chunk. Defaults to 7. fig.align : The alignment of plots. Defaults to default, i.e. no alignment adjustments are made. You can find all options in the package documentation for knitr. Plain text with simple text formatting The last important type of content often constitutes most of the body of an R Markdown file: plain text mixed with simple text formatting. In the following, we will provide a quick overview over the most commonly used R Markdown syntax: Syntax Output plain text plain text *italics* or _italics_ italics **bold** or __bold__ bold subscipt~2~ subscipt2 superscript^2^ superscript2 ~~strikethrough~~ strikethrough endash: -- endash: – emdash: --- emdash: — inline R code: ` r mean(1:4) ` inline R code: 2.5 inline equation: $A = \\pi \\times r^{2}$ inline equation: \\(A = \\pi \\times r^{2}\\) image: ! [optional caption text] (path/to/image.png) image: [link](https://rmarkdown.rstudio.com/) link # 1st level header 1st level header ## 2nd level header 2nd level header ### 3rd level header 3rd level header #### 4th level header 4th level header ##### 5th level header 5th level header ###### 6th level header 6th level header * Bullet list item 1 - Bullet list item 2 + Item 2a + Item 2b Bullet list item 1 Bullet list item 2 Item 2a Item 2b 1. Numbered list item 1 1. Item 2. The numbers are incremented automatically in the output 1. Item 2a 1. Item 2b Numbered list item 1 Item 2. The numbers are incremented automatically in the output Item 2a Item 2b &gt; block quote block quote First Header | Second Header -----------------|----------------- Content Cell | Content Cell Content Cell | Content Cell First Header Second Header Content Cell Content Cell Content Cell Content Cell Finally, you can start a new paragraph by ending a line with four spaces, and you can insert a horizontal rule (or insert a slide break) with three or more asterisks (***) or dashes (---) You can find a similar list in the article Markdown Basics on the RMarkdown website. 4.2 Producing a complete report To generate a complete report containing all text, code and results, either run the render() command specifying the name of the file you want to render: rmarkdown::render(&quot;my_file.Rmd&quot;, output_format = &quot;html_document&quot;) use the knit button ( Knit) at the top of the Source pane or use the keyboard shortcut Ctrl+Shift+K / Shift+Command+K. In addition to rendering the file, the knit button and the keyboard shortcut also show a preview of the output in the Output pane. All three methods generate a self-contained file that you can share with others in the directory of the input file. Exercise Make your own website with R Markdown This exercise is based on the exercise from Section 2.3. You need an R Studio project cloned from Florian Privé’s GitHub repository rmarkdown-website-template to do this exercise. If you haven’t cloned the repository, go back to Section 2.3.2 and go through the exercise Fork a repository before you continue with this exercise. Open the R Studio project that is linked to the GitHub repository [YOURGITHUBNAME].github.io (where [YOURGITHUBNAME] represents your GitHub username). Build the website by running rmarkdown::render_site(encoding = \"UTF-8\") or by using the keyboard shortcut Ctrl+Shift+B / Shift+Command+B. Commit and push all new or updated files to your GitHub repository. The first time you build the website, a full directory (site_libs/) is created. Trying to add all the files from this directory to a commit can make RStudio freeze. If this happens, restart R Studio and run rm .git/index.lock in the terminal of R Studio (the terminal is part of the Console pane). Afterwards, run git add . in the terminal; This will add all new files for you to commit (you can see all the added files in the Git panel of the Environments pane after refreshing it). Change the content of your website by modifying _site.yml, index.Rmd, about.Rmd, cv.Rmd and CV.pdf. Build your website again (see Step 2) and commit &amp; push everything to the GitHub repository. At any point, you can preview your website locally by rendering your site and opening the generated HTML files in your Web Browser. You can also see your website at https://YOURGITHUBNAME.github.io/. If you need some inspiration, here are some websites created with R Markdown: Modern Applied Data Analysis (MADA) Lucy D’Agostino McGowan’s personal website The R user group in Grenoble And to learn more about what pages should be included on your website, read this blog post by Animate Your Science. 4.3 Summary R Markdown is a file format for making reproducible, dynamics documents with R. An R Markdown document is written in Markdown and contains plain text and embedded R code along with results. The typical extension for an R Markdown file is .Rmd. To open a new R Markdown document, go to File -&gt; New File -&gt; R Markdown… or click on in the upper-left corner of the RStudio menu and select R Markdown… . R Studio will launch a wizard that you can use to pre-populate the file with useful content. An R Markdown document starts with an (optional) YAML header where you can specify (or update) metadata about the document and rendering instructions. The body of an R Markdown file can contain R code chunks surrounded by ```{r} and ``` You can customise the chunk output with options specified in the chunk header ```{r}. The plain text in an R Markdown file can be formatted with R Markdown syntax. To generate a complete report containing all text, code and results, use the knit button ( Knit) at the top of the Source pane or the keyboard shortcut Ctrl+Shift+K / Shift+Command+K. Useful resources R Markdown Quick Tour Introduction to R Markdown by Garrett Grolemund R Markdown: The Definitive Guide by Yihui Xie, J. J. Allaire and Garrett Grolemund {R Markdown}, a presentation by Florian Privé and Julyan Arbel. Chapter 27 R Markdown of R for Data Science by Hadley Wickham and Garrett Grolemund. R Markdown Websites "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
