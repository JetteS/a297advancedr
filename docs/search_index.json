[["index.html", "Advanced R Course Originally, materials for the doctoral school of Grenoble, France About License Author", " Advanced R Course Originally, materials for the doctoral school of Grenoble, France Florian Privé 2021-08-20 About License This material is licensed under the Creative Commons Attribution-ShareAlike 3.0 License. Author Florian Privé is a postdoc in predictive human genetics, fond of Data Science and an R(cpp) enthusiast. He is also the founder and former organizer of the Grenoble R user group. You can find him on Twitter and GitHub as @privefl and on Stack Overflow as F. Privé. "],["introduction.html", "Chapter 1 Introduction 1.1 Prerequisites 1.2 Content 1.3 Useful resources", " Chapter 1 Introduction 1.1 Prerequisites Have at least a basic knowledge of R, Install recent versions of R (&gt;= 3.4) and RStudio (&gt;= 1.2), Install associated package advr38pkg with remotes::install_github(\"privefl/advr38pkg\"). This will install other dependencies that are needed in this book. 1.2 Content It is impossible to become expert in R in only one training course. Yet, this course aims at giving a wide understanding of many aspects of R. Some external resources will be referred to in this book for you to be able to deepen what you would have learned in this course. This course was originally composed of 9 sessions (3 hours each): R programming and good practices (1.5 sessions) Data analysis with the tidyverse (3.5 sessions) R code performance (2 sessions) R packages (1 session) Bonus: Shiny (1 session) 1.3 Useful resources Course on R debugging and robust programming by Laurent Gatto &amp; Robert Stojnic, Data Challenge Lab by Hadley Wickham, Advanced R by Hadley Wickham, and some solutions, R for Data Science by Garrett Grolemund &amp; Hadley Wickham, and some solutions, R packages by Hadley Wickham, Efficient R programming by Colin Gillespie &amp; Robin Lovelace, R Programming for Data Science by Roger D. Peng, Mastering Software Development in R by Roger D. Peng, Sean Kross and Brooke Anderson, other resources linked from these materials. "],["good-practices.html", "Chapter 2 Good practices 2.1 Coding style 2.2 RStudio 2.3 Version control (Git) 2.4 Getting help", " Chapter 2 Good practices 2.1 Coding style Good coding style is like correct punctuation: you can manage without it, butitsuremakesthingseasiertoread.  Hadley Wickham Please make your code readable by following e.g. this coding style (examples below come from this guide). You can use package styler (that provides RStudio addins) to correct your style: 2.1.1 Naming Be smart with your naming. I cant tell the number of times Ive seen df &lt;- as.matrix(mtcars) on Stack Overflow. 2.1.2 Spacing Put a space before and after = when naming arguments in function calls. Most infix operators (==, +, -, &lt;-, etc.) are also surrounded by spaces, except those with relatively high precedence: ^, :, ::, and :::. Always put a space after a comma, and never before (just like in regular English). # Good average &lt;- mean((feet / 12) + inches, na.rm = TRUE) x &lt;- 1:10 base::sum # Bad average&lt;-mean(feet/12+inches,na.rm=TRUE) x &lt;- 1 : 10 base :: sum 2.1.3 Indenting Curly braces, {}, define the most important hierarchy of R code. To make this hierarchy easy to see, always indent the code inside {} by two spaces. This should be automatic in RStudio. # Good if (y &lt; 0 &amp;&amp; debug) { message(&quot;y is negative&quot;) } if (y == 0) { if (x &gt; 0) { log(x) } else { message(&quot;x is negative or zero&quot;) } } else { y ^ x } # Bad if (y &lt; 0 &amp;&amp; debug) message(&quot;Y is negative&quot;) if (y == 0) { if (x &gt; 0) { log(x) } else { message(&quot;x is negative or zero&quot;) } } else { y ^ x } 2.1.4 Long lines Strive to limit your code to 80 characters per line. This fits comfortably on a printed page with a reasonably sized font. If you find yourself running out of room, this is a good indication that you should encapsulate some of the work in a separate function. If a function call is too long to fit on a single line, use one line for the function name, for each argument, and for the closing ). This makes the code easier to read and to modify later. 2.1.5 Other Use &lt;-, not =, for assignment. Keep = for parameters. # Good x &lt;- 5 system.time( x &lt;- rnorm(1e6) ) # Bad x = 5 system.time( x = rnorm(1e6) ) Dont put ; at the end of a line, and avoid multiple commands on the same line. Only use return() for early returns. Otherwise rely on R to return the result of the last evaluated expression. # Good add_two &lt;- function(x, y) { x + y } # Bad add_two &lt;- function(x, y) { return(x + y) } Use \", not ', for quoting text. The only exception is when the text already contains double quotes and no single quotes. # Good &quot;Text&quot; &#39;Text with &quot;quotes&quot;&#39; &#39;&lt;a href=&quot;http://style.tidyverse.org&quot;&gt;A link&lt;/a&gt;&#39; # Bad &#39;Text&#39; &#39;Text with &quot;double&quot; and \\&#39;single\\&#39; quotes&#39; 2.2 RStudio Download a recent version of RStudio (&gt;= 1.2) and use it! Learn more about the new features of RStudio at https://rstudio.com/products/rstudio/release-notes/. RStudio features: everything you can expect from a good IDE keyboard shortcuts I use Ctrl + Space (auto-completion, better than Tab) Ctrl + Up (command history &amp; search) Ctrl + Click (function source code) Ctrl + Enter (execute line of code) Ctrl + Shift + A (reformat code) Ctrl + Shift + C (comment/uncomment selected lines) Ctrl + Shift + K (knit) Ctrl + Shift + B (build package, website or book) Ctrl + Shift + M (pipe) Alt + Shift + K to see all shortcuts Panels (everything is integrated, including Git and a terminal) Interactive data importation from files and connections (see this webinar) Use code diagnostics: R Projects: Meaningful structure in one folder The working directory automatically switches to the projects folder The File tab displays the associated files and folders in the project History of R commands and open files Any settings associated with the project, such as Git settings, are loaded. Note that you can have a .Rprofile file in the projects root directory to enable project-specific settings to be loaded each time people open the project. Read more at https://www.tidyverse.org/articles/2017/12/workflow-vs-script/ and also see chapter Efficient set-up of book Efficient R programming. 2.3 Version control (Git) 2.3.1 Why use Git? You dont use Git? Figure 2.1: You dont use Version Control? Have you ever: Made a change to code, realized it was a mistake and wanted to revert back? Lost code or had a backup that was too old? Wanted to submit a change to someone elses code? Wanted to share your code, or let other people work on your code? In these cases, and probably many others, a version control system should make your life easier (see https://stackoverflow.com/a/1408464/6103040). Version control for the researcher: dont do that, use Git Version control for the data analyst: reproducible workflow Also, see https://stackoverflow.com/q/2712421/6103040. Use version control to work from anywhere Working with GitHub can be a line on your CV (read more): A lot of students have said to me later, even first-year undergraduates, that using GitHub has helped them a lot when they went for an internship or a research position interview. They are able to say, Oh, I already have worked with GitHub. Im familiar with it. I know how it works. So I think they are at least able to put that on their CV and go into a situation where theres a research or data analysis team and say, Yeah, sure. I am actually familiar with the same tools that you use.  Mine Cetinkaya-Rundel, Duke University, RStudio Be able to get websites for your packages with pkgdown, for your book (like this one!) with bookdown, for your personal webpage with R Markdown Websites or blogdown. 2.3.2 About Git Main Git platforms (share your code, collaborate): GitHub, documentation (only free for public repositories, now owned by Microsoft) GitLab UGA (documentation) or just GitLab (open source &amp; free) Bitbucket (free when you have less than 5 collaborators) any server.. 3 main commands: pull: update your local project with the latest version of the main project commit: snapshot of your code at a specified point in time push: merge your local modifications with the main project Simple (solo) use of git to prevent merge conflicts: after opening a project, always pull before closing a project, always commit/push How to link between an RStudio project and a GitHub repository? Help with Git: H. Wickhams book Happy Git and GitHub for the useR Git cheat sheet When things go wrong To fix a mistake Create a new branch with git and manage branches 2.4 Getting help 2.4.1 Help yourself, learn how to debug A basic solution is to print everything, but its usually not working well on complex problems. A convenient solution to see all the variables states in your code is to place some browser() from where you want to check the variables states. To debug functions, debugonce() is also very useful. my_log &lt;- function(x) log(x - 1) my_fun &lt;- function(a, b) { # browser() la &lt;- my_log(a) lb &lt;- my_log(b) la + lb } my_fun(1, 0) #&gt; Warning in log(x - 1): NaNs produced #&gt; [1] NaN Try to uncomment browser() or use debugonce(my_fun): debugonce(my_fun) my_fun(1, 0) Learn more with this book chapter, this other book chapter, this webinar and this RStudio article. 2.4.2 External help Cant remember useful functions? Use cheat sheets. You can search for specific R stuff on https://rseek.org/. You should also read documentations carefully. If youre using a package, search for vignettes and a GitHub repository. You can also use Stack Overflow. The most common use of Stack Overflow is when you have an error or a question, you google it, and most of the times the first links are Q/A on Stack Overflow. You can ask questions on Stack Overflow (using the tag r). You need to make a great R reproducible example if you want your question to be answered. Sometimes, while making this reproducible example, you find the answer to your problem. If youre confident enough with your R skills, you can take the next step and answer questions on Stack Overflow. Its a good way to increase your skills, or just to procrastinate while writing a scientific manuscript. You can also join communities, e.g. join the French-speaking R community or join the R-Ladies community. These are generally much friendlier and welcoming spaces compared to Stack Overflow. "],["r-programming.html", "Chapter 3 R programming 3.1 Common mistakes 3.2 R base objects 3.3 Base objects and accessors 3.4 Useful R base functions 3.5 Environments and scoping 3.6 Attributes and classes", " Chapter 3 R programming This chapter is about base R stuff that I find important and that is often overlooked or unknown to most R users. Learn more with the Advanced R book. 3.1 Common mistakes If you are using R and you think youre in hell, this is a map for you.  Patrick Burns 3.1.1 Equality (0.1 + 0.2) == 0.3 #&gt; [1] FALSE print(c(0.1, 0.2, 0.3), digits = 20) #&gt; [1] 0.10000000000000001 0.20000000000000001 0.29999999999999999 all.equal(0.1 + 0.2, 0.3) ## equality with some tolerance #&gt; [1] TRUE all.equal(0.1 + 0.2, 0.4) #&gt; [1] &quot;Mean relative difference: 0.3333333&quot; isTRUE(all.equal(0.1 + 0.2, 0.4)) ## if you want a boolean, use isTRUE() #&gt; [1] FALSE 3.1.2 Arguments min(-1, 5, 118) #&gt; [1] -1 max(-1, 5, 118) #&gt; [1] 118 mean(-1, 5, 118) #&gt; [1] -1 median(-1, 5, 118) #&gt; [1] -1 args(max) #&gt; function (..., na.rm = FALSE) #&gt; NULL args(mean) #&gt; function (x, ...) #&gt; NULL args(median) #&gt; function (x, na.rm = FALSE, ...) #&gt; NULL Always use a vector if youre not sure: min(c(-1, 5, 118)) #&gt; [1] -1 max(c(-1, 5, 118)) #&gt; [1] 118 mean(c(-1, 5, 118)) #&gt; [1] 40.66667 median(c(-1, 5, 118)) #&gt; [1] 5 3.1.3 Others sample(1:10) #&gt; [1] 2 6 8 5 1 3 7 9 10 4 sample(10) #&gt; [1] 4 5 7 6 9 10 1 8 3 2 sample(10.1) #&gt; [1] 2 5 3 6 7 8 10 1 9 4 n &lt;- 10 1:n-1 # is (1:n) - 1, so 0:(n - 1) #&gt; [1] 0 1 2 3 4 5 6 7 8 9 1:(n-1) #&gt; [1] 1 2 3 4 5 6 7 8 9 seq_len(n - 1) #&gt; [1] 1 2 3 4 5 6 7 8 9 1:0 #&gt; [1] 1 0 seq_len(0) ## prefer using seq_len (e.g. in for-loops) #&gt; integer(0) 3.2 R base objects 3.2.1 Types There are many atomic types of data: logical, integer, double and character (in this order, see below). There are also raw and complex but they are rarely used. You cant mix types in an atomic vector (you can in a list). Coercion will automatically occur if you mix types: (a &lt;- FALSE) #&gt; [1] FALSE typeof(a) #&gt; [1] &quot;logical&quot; (b &lt;- 1:10) #&gt; [1] 1 2 3 4 5 6 7 8 9 10 typeof(b) #&gt; [1] &quot;integer&quot; c(a, b) ## FALSE is coerced to integer 0 #&gt; [1] 0 1 2 3 4 5 6 7 8 9 10 (c &lt;- 10.5) #&gt; [1] 10.5 typeof(c) #&gt; [1] &quot;double&quot; (d &lt;- c(b, c)) ## coerced to numeric #&gt; [1] 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 10.5 c(d, &quot;a&quot;) ## coerced to character #&gt; [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; &quot;6&quot; &quot;7&quot; &quot;8&quot; &quot;9&quot; &quot;10&quot; &quot;10.5&quot; &quot;a&quot; c(list(1), &quot;a&quot;) #&gt; [[1]] #&gt; [1] 1 #&gt; #&gt; [[2]] #&gt; [1] &quot;a&quot; 50 &lt; &quot;7&quot; ## &quot;50&quot; &lt; &quot;7&quot; #&gt; [1] TRUE 3.2.2 Exercise Use the automatic type coercion to convert this boolean matrix to a numeric one (with 0s and 1s). [What do you need to change to get an integer matrix instead?] (mat &lt;- matrix(sample(c(TRUE, FALSE), 12, replace = TRUE), 3)) #&gt; [,1] [,2] [,3] [,4] #&gt; [1,] TRUE TRUE FALSE FALSE #&gt; [2,] TRUE TRUE FALSE TRUE #&gt; [3,] TRUE FALSE TRUE TRUE 3.3 Base objects and accessors 3.3.1 Objects atomic vector: vector of one base type (see above). scalar: this doesnt exist, this is a vector of length 1. matrices / arrays: a vector with some dimensions (attribute). (vec &lt;- 1:12) #&gt; [1] 1 2 3 4 5 6 7 8 9 10 11 12 dim(vec) &lt;- c(3, 4) vec #&gt; [,1] [,2] [,3] [,4] #&gt; [1,] 1 4 7 10 #&gt; [2,] 2 5 8 11 #&gt; [3,] 3 6 9 12 class(vec) #&gt; [1] &quot;matrix&quot; dim(vec) &lt;- c(3, 2, 2) vec #&gt; , , 1 #&gt; #&gt; [,1] [,2] #&gt; [1,] 1 4 #&gt; [2,] 2 5 #&gt; [3,] 3 6 #&gt; #&gt; , , 2 #&gt; #&gt; [,1] [,2] #&gt; [1,] 7 10 #&gt; [2,] 8 11 #&gt; [3,] 9 12 class(vec) #&gt; [1] &quot;array&quot; list: vector of elements with possibly different types in it. data.frame: a list whose elements have the same lengths, and formatted somewhat as a matrix. head(iris) #&gt; Sepal.Length Sepal.Width Petal.Length Petal.Width Species #&gt; 1 5.1 3.5 1.4 0.2 setosa #&gt; 2 4.9 3.0 1.4 0.2 setosa #&gt; 3 4.7 3.2 1.3 0.2 setosa #&gt; 4 4.6 3.1 1.5 0.2 setosa #&gt; 5 5.0 3.6 1.4 0.2 setosa #&gt; 6 5.4 3.9 1.7 0.4 setosa dim(iris) #&gt; [1] 150 5 length(iris) #&gt; [1] 5 3.3.2 Accessors The [ accessor is used to access a subset of the data with the same class. (x &lt;- runif(5)) #&gt; [1] 0.44807130 0.62153792 0.21489806 0.04745351 0.52382861 x[2:3] #&gt; [1] 0.6215379 0.2148981 x[2:8] #&gt; [1] 0.62153792 0.21489806 0.04745351 0.52382861 NA NA NA (y &lt;- matrix(runif(12), 3)) #&gt; [,1] [,2] [,3] [,4] #&gt; [1,] 0.3069655 0.2322659 0.6463609 0.3453824 #&gt; [2,] 0.3750572 0.5349028 0.2443481 0.1290939 #&gt; [3,] 0.9992631 0.2139430 0.6285527 0.5033093 y[4:9] ## a matrix is a vector #&gt; [1] 0.2322659 0.5349028 0.2139430 0.6463609 0.2443481 0.6285527 (l &lt;- list(a = 2:3, b = &quot;toto&quot;, c = runif(10))) #&gt; $a #&gt; [1] 2 3 #&gt; #&gt; $b #&gt; [1] &quot;toto&quot; #&gt; #&gt; $c #&gt; [1] 0.7999544 0.1023930 0.5466600 0.7070417 0.4803148 0.1461758 0.5984381 0.5436870 #&gt; [9] 0.8746974 0.3394718 l[2:3] #&gt; $b #&gt; [1] &quot;toto&quot; #&gt; #&gt; $c #&gt; [1] 0.7999544 0.1023930 0.5466600 0.7070417 0.4803148 0.1461758 0.5984381 0.5436870 #&gt; [9] 0.8746974 0.3394718 head(iris) #&gt; Sepal.Length Sepal.Width Petal.Length Petal.Width Species #&gt; 1 5.1 3.5 1.4 0.2 setosa #&gt; 2 4.9 3.0 1.4 0.2 setosa #&gt; 3 4.7 3.2 1.3 0.2 setosa #&gt; 4 4.6 3.1 1.5 0.2 setosa #&gt; 5 5.0 3.6 1.4 0.2 setosa #&gt; 6 5.4 3.9 1.7 0.4 setosa head(iris[3:4]) #&gt; Petal.Length Petal.Width #&gt; 1 1.4 0.2 #&gt; 2 1.4 0.2 #&gt; 3 1.3 0.2 #&gt; 4 1.5 0.2 #&gt; 5 1.4 0.2 #&gt; 6 1.7 0.4 class(iris[5]) #&gt; [1] &quot;data.frame&quot; You can also use a logical and character vectors to index these objects. (x &lt;- runif(4)) #&gt; [1] 0.73691989 0.15665654 0.46709044 0.07159353 x[c(FALSE, TRUE, FALSE, TRUE)] #&gt; [1] 0.15665654 0.07159353 x[c(FALSE, TRUE)] ## logical vectors are recycled #&gt; [1] 0.15665654 0.07159353 head(iris[c(&quot;Petal.Length&quot;, &quot;Species&quot;)]) #&gt; Petal.Length Species #&gt; 1 1.4 setosa #&gt; 2 1.4 setosa #&gt; 3 1.3 setosa #&gt; 4 1.5 setosa #&gt; 5 1.4 setosa #&gt; 6 1.7 setosa The [[ accessor is used to access a single element. (x &lt;- 1:10) #&gt; [1] 1 2 3 4 5 6 7 8 9 10 x[[3]] #&gt; [1] 3 l[[2]] #&gt; [1] &quot;toto&quot; iris[[&quot;Species&quot;]] #&gt; [1] setosa setosa setosa setosa setosa setosa setosa setosa setosa setosa setosa setosa #&gt; [13] setosa setosa setosa setosa setosa setosa setosa setosa setosa setosa setosa setosa #&gt; [25] setosa setosa setosa setosa setosa setosa setosa setosa setosa setosa setosa setosa #&gt; [37] setosa setosa setosa setosa setosa setosa setosa setosa setosa setosa setosa setosa #&gt; [49] setosa setosa #&gt; [ reached getOption(&quot;max.print&quot;) -- omitted 100 entries ] #&gt; Levels: setosa versicolor virginica Figure 3.1: Indexing lists in R. [Source: https://goo.gl/8UkcHq] Beware partial matching x &lt;- list(aardvark = 1:5) x$a #&gt; [1] 1 2 3 4 5 x[[&quot;a&quot;]] #&gt; NULL x[[&quot;a&quot;, exact = FALSE]] #&gt; [1] 1 2 3 4 5 Special use of the [ accessor for array-like data. (mat &lt;- matrix(1:12, 3)) #&gt; [,1] [,2] [,3] [,4] #&gt; [1,] 1 4 7 10 #&gt; [2,] 2 5 8 11 #&gt; [3,] 3 6 9 12 mat[1, ] #&gt; [1] 1 4 7 10 mat[, 1:2] #&gt; [,1] [,2] #&gt; [1,] 1 4 #&gt; [2,] 2 5 #&gt; [3,] 3 6 mat[1, 1:2] #&gt; [1] 1 4 mat[1, 1:2, drop = FALSE] #&gt; [,1] [,2] #&gt; [1,] 1 4 (two_col_ind &lt;- cbind(c(1, 3, 2), c(1, 4, 2))) #&gt; [,1] [,2] #&gt; [1,] 1 1 #&gt; [2,] 3 4 #&gt; [3,] 2 2 mat[two_col_ind] #&gt; [1] 1 12 5 mat[,] #&gt; [,1] [,2] [,3] [,4] #&gt; [1,] 1 4 7 10 #&gt; [2,] 2 5 8 11 #&gt; [3,] 3 6 9 12 mat[] #&gt; [,1] [,2] [,3] [,4] #&gt; [1,] 1 4 7 10 #&gt; [2,] 2 5 8 11 #&gt; [3,] 3 6 9 12 mat[] &lt;- 2 mat #&gt; [,1] [,2] [,3] [,4] #&gt; [1,] 2 2 2 2 #&gt; [2,] 2 2 2 2 #&gt; [3,] 2 2 2 2 If you use arrays with more than two dimensions, just add a comma for every new dimension. 3.3.3 Exercises Use the dimension attribute to make a function that computes the sums every n elements of a vector. In which order are matrix elements stored? [Which are the special cases that you should consider?] advr38pkg::sum_every(1:10, 2) #&gt; [1] 3 7 11 15 19 Compute the means of every numeric columns of the iris dataset. Expected result: #&gt; Sepal.Length Sepal.Width Petal.Length Petal.Width #&gt; 5.843333 3.057333 3.758000 1.199333 Convert this matrix to a vector by replacing c(0,0) -&gt; 0; c(0,1) -&gt; 1; c(1,1) -&gt; 2; c(1,0) -&gt; NA mat &lt;- matrix(0, 10, 2); mat[c(5, 8, 9, 12, 15, 16, 17, 19)] &lt;- 1; mat #&gt; [,1] [,2] #&gt; [1,] 0 0 #&gt; [2,] 0 1 #&gt; [3,] 0 0 #&gt; [4,] 0 0 #&gt; [5,] 1 1 #&gt; [6,] 0 1 #&gt; [7,] 0 1 #&gt; [8,] 1 0 #&gt; [9,] 1 1 #&gt; [10,] 0 0 by using this matrix: (decode &lt;- matrix(c(0, NA, 1, 2), 2)) #&gt; [,1] [,2] #&gt; [1,] 0 1 #&gt; [2,] NA 2 Begin by using apply() and then replace it by a special accessor; what is the benefit? Expected result: #&gt; [1] 0 1 0 0 2 1 1 NA 2 0 3.4 Useful R base functions In this section, I present some useful R base functions (also see this comprehensive list in French and this one in English): 3.4.1 General # To get some help ?topic # Run code from the example section example(sum) # Structure overview str(iris) #&gt; &#39;data.frame&#39;: 150 obs. of 5 variables: #&gt; $ Sepal.Length: num 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... #&gt; $ Sepal.Width : num 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... #&gt; $ Petal.Length: num 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... #&gt; $ Petal.Width : num 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... #&gt; $ Species : Factor w/ 3 levels &quot;setosa&quot;,&quot;versicolor&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... # List objects of environment ls() #&gt; [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;decode&quot; &quot;l&quot; #&gt; [7] &quot;mat&quot; &quot;n&quot; &quot;osef&quot; &quot;two_col_ind&quot; &quot;vec&quot; &quot;x&quot; #&gt; [13] &quot;y&quot; # Remove objects from the environment rm(list = ls()) ## remove all objects in the environment # list of available S3 methods methods(summary) #&gt; [1] summary.aov summary.aovlist* #&gt; [3] summary.aspell* summary.check_packages_in_dir* #&gt; [5] summary.connection summary.data.frame #&gt; [7] summary.Date summary.default #&gt; [9] summary.ecdf* summary.factor #&gt; [11] summary.glm summary.infl* #&gt; [13] summary.lm summary.loess* #&gt; [15] summary.manova summary.matrix #&gt; [17] summary.mlm* summary.nls* #&gt; [19] summary.packageStatus* summary.POSIXct #&gt; [21] summary.POSIXlt summary.ppr* #&gt; [23] summary.prcomp* summary.princomp* #&gt; [25] summary.proc_time summary.rlang_error* #&gt; [27] summary.rlang_trace* summary.srcfile #&gt; [29] summary.srcref summary.stepfun #&gt; [31] summary.stl* summary.table #&gt; [33] summary.tukeysmooth* summary.warnings #&gt; see &#39;?methods&#39; for accessing help and source code methods(class = &quot;lm&quot;) #&gt; [1] add1 alias anova case.names coerce #&gt; [6] confint cooks.distance deviance dfbeta dfbetas #&gt; [11] drop1 dummy.coef effects extractAIC family #&gt; [16] formula hatvalues influence initialize kappa #&gt; [21] labels logLik model.frame model.matrix nobs #&gt; [26] plot predict print proj qr #&gt; [31] residuals rstandard rstudent show simulate #&gt; [36] slotsFromS3 summary variable.names vcov #&gt; see &#39;?methods&#39; for accessing help and source code # Call a function with arguments as a list (list_of_int &lt;- lapply(1:5, function(i) i)) #&gt; [[1]] #&gt; [1] 1 #&gt; #&gt; [[2]] #&gt; [1] 2 #&gt; #&gt; [[3]] #&gt; [1] 3 #&gt; #&gt; [[4]] #&gt; [1] 4 #&gt; #&gt; [[5]] #&gt; [1] 5 do.call(&#39;c&#39;, list_of_int) #&gt; [1] 1 2 3 4 5 3.4.2 Sequence and vector operations 1:10 ## of type integer #&gt; [1] 1 2 3 4 5 6 7 8 9 10 seq(1, 10, by = 2) ## of type double #&gt; [1] 1 3 5 7 9 seq(1, 100, length.out = 10) #&gt; [1] 1 12 23 34 45 56 67 78 89 100 seq_len(5) #&gt; [1] 1 2 3 4 5 seq_along(21:24) #&gt; [1] 1 2 3 4 rep(1:4, 2) #&gt; [1] 1 2 3 4 1 2 3 4 rep(1:4, each = 2) #&gt; [1] 1 1 2 2 3 3 4 4 rep(1:4, 4:1) #&gt; [1] 1 1 1 1 2 2 2 3 3 4 rep_len(1:3, 8) #&gt; [1] 1 2 3 1 2 3 1 2 replicate(5, rnorm(10)) ## How to use a multiline expression? #&gt; [,1] [,2] [,3] [,4] [,5] #&gt; [1,] 0.93846460 0.084813875 2.0453056 -1.21374614 -0.52956126 #&gt; [2,] 0.21363856 0.472690627 -1.1620982 -0.07644218 1.20930404 #&gt; [3,] 0.53807914 2.382310528 0.4647532 0.60873265 -1.33783998 #&gt; [4,] -0.64570483 -0.008324880 1.7755535 0.29781600 -0.02224145 #&gt; [5,] 0.05012369 -0.072429278 -1.5604312 0.10614859 -0.20997969 #&gt; [6,] 0.56267527 0.396873009 0.2417296 0.01299187 0.77520605 #&gt; [7,] -1.21505483 -0.002609421 -0.3970332 0.61041314 -2.78869266 #&gt; [8,] -1.81045026 0.286111450 -0.8375245 0.73542016 -0.19036000 #&gt; [9,] 0.56035322 0.022867584 -0.7482098 -0.73185847 -1.64131419 #&gt; [10,] 1.20286080 1.323816373 0.6813290 -0.28415745 -1.02107054 sort(c(1, 6, 8, 2, 2)) #&gt; [1] 1 2 2 6 8 order(c(1, 6, 8, 2, 2), c(0, 0, 0, 2, 1)) #&gt; [1] 1 5 4 2 3 rank(c(1, 6, 8, 2, 2)) #&gt; [1] 1.0 4.0 5.0 2.5 2.5 rank(c(1, 6, 8, 2, 2), ties.method = &quot;first&quot;) #&gt; [1] 1 4 5 2 3 sort(c(&quot;a1&quot;, &quot;a2&quot;, &quot;a10&quot;)) #&gt; [1] &quot;a1&quot; &quot;a10&quot; &quot;a2&quot; gtools::mixedsort(c(&quot;a1&quot;, &quot;a2&quot;, &quot;a10&quot;)) ## not in base, obviously #&gt; [1] &quot;a1&quot; &quot;a2&quot; &quot;a10&quot; which.max(c(1, 5, 3, 6, 2, 0)) #&gt; [1] 4 which.min(c(1, 5, 3, 6, 2, 0)) #&gt; [1] 6 unique(c(1, NA, 2, 3, 2, NA, 3)) #&gt; [1] 1 NA 2 3 table(rep(1:4, 4:1)) #&gt; #&gt; 1 2 3 4 #&gt; 4 3 2 1 table(A = c(1, 1, 1, 2, 2), B = c(1, 2, 1, 2, 1)) #&gt; B #&gt; A 1 2 #&gt; 1 2 1 #&gt; 2 1 1 sample(10) #&gt; [1] 4 9 1 6 2 5 10 8 3 7 sample(3:10, 5) #&gt; [1] 6 10 7 5 9 sample(3:10, 50, replace = TRUE) #&gt; [1] 7 9 5 9 8 7 6 4 8 8 3 9 9 10 6 9 5 7 5 10 3 9 3 3 3 4 6 5 #&gt; [29] 7 5 9 9 7 9 7 10 4 7 8 5 5 6 6 4 7 9 3 4 6 6 round(x &lt;- runif(10, max = 100)) #&gt; [1] 73 56 48 9 52 59 0 3 19 47 round(x, digits = 2) #&gt; [1] 72.75 56.10 48.14 9.23 52.13 58.72 0.11 3.03 18.96 46.82 round(x, -1) #&gt; [1] 70 60 50 10 50 60 0 0 20 50 pmin(1:4, 4:1) #&gt; [1] 1 2 2 1 pmax(1:4, 4:1) #&gt; [1] 4 3 3 4 outer(1:4, 1:3, &#39;+&#39;) #&gt; [,1] [,2] [,3] #&gt; [1,] 2 3 4 #&gt; [2,] 3 4 5 #&gt; [3,] 4 5 6 #&gt; [4,] 5 6 7 expand.grid(param1 = c(5, 50), param2 = c(1, 3, 10)) #&gt; param1 param2 #&gt; 1 5 1 #&gt; 2 50 1 #&gt; 3 5 3 #&gt; 4 50 3 #&gt; 5 5 10 #&gt; 6 50 10 Also see this nice Q/A on grouping functions and the *apply family and this book chapter about looping. 3.4.3 Character operations paste(&quot;I&quot;, &quot;am&quot;, &quot;me&quot;) #&gt; [1] &quot;I am me&quot; paste0(&quot;test&quot;, 0) #&gt; [1] &quot;test0&quot; paste0(&quot;PC&quot;, 1:10) #&gt; [1] &quot;PC1&quot; &quot;PC2&quot; &quot;PC3&quot; &quot;PC4&quot; &quot;PC5&quot; &quot;PC6&quot; &quot;PC7&quot; &quot;PC8&quot; &quot;PC9&quot; &quot;PC10&quot; me &lt;- &quot;Florian&quot; glue::glue(&quot;I am {me}&quot;) ## not in base, but SO useful #&gt; I am Florian (x &lt;- list.files(pattern = &quot;\\\\.Rmd$&quot;, full.names = TRUE)) #&gt; [1] &quot;./good-practices.Rmd&quot; &quot;./index.Rmd&quot; &quot;./intro.Rmd&quot; #&gt; [4] &quot;./packages.Rmd&quot; &quot;./performance.Rmd&quot; &quot;./rprog.Rmd&quot; #&gt; [7] &quot;./shiny.Rmd&quot; &quot;./tidyverse.Rmd&quot; sub(&quot;\\\\.Rmd$&quot;, &quot;.pdf&quot;, x) #&gt; [1] &quot;./good-practices.pdf&quot; &quot;./index.pdf&quot; &quot;./intro.pdf&quot; #&gt; [4] &quot;./packages.pdf&quot; &quot;./performance.pdf&quot; &quot;./rprog.pdf&quot; #&gt; [7] &quot;./shiny.pdf&quot; &quot;./tidyverse.pdf&quot; (y &lt;- sample(letters[1:4], 10, replace = TRUE)) #&gt; [1] &quot;c&quot; &quot;d&quot; &quot;d&quot; &quot;d&quot; &quot;a&quot; &quot;a&quot; &quot;d&quot; &quot;d&quot; &quot;d&quot; &quot;d&quot; match(y, letters[1:4]) #&gt; [1] 3 4 4 4 1 1 4 4 4 4 y %in% letters[1:2] #&gt; [1] FALSE FALSE FALSE FALSE TRUE TRUE FALSE FALSE FALSE FALSE rle(rep(1:4, 4:1)) #&gt; Run Length Encoding #&gt; lengths: int [1:4] 4 3 2 1 #&gt; values : int [1:4] 1 2 3 4 split(1:12, rep(letters[1:3], 4)) #&gt; $a #&gt; [1] 1 4 7 10 #&gt; #&gt; $b #&gt; [1] 2 5 8 11 #&gt; #&gt; $c #&gt; [1] 3 6 9 12 intersect(letters[1:4], letters[3:5]) #&gt; [1] &quot;c&quot; &quot;d&quot; union(letters[1:4], letters[3:5]) #&gt; [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; setdiff(letters[1:4], letters[3:5]) #&gt; [1] &quot;a&quot; &quot;b&quot; 3.4.4 Logical operators TRUE | stop(&quot;will go there&quot;) #&gt; Error in eval(expr, envir, enclos): will go there TRUE || stop(&quot;won&#39;t go there&quot;) ## won&#39;t evaluate second condition if first one is TRUE #&gt; [1] TRUE c(TRUE, FALSE, TRUE, TRUE) &amp; c(FALSE, TRUE, TRUE, FALSE) #&gt; [1] FALSE FALSE TRUE FALSE c(TRUE, FALSE, TRUE, TRUE) &amp;&amp; c(FALSE, TRUE, TRUE, FALSE) ## no warning!! #&gt; [1] FALSE (x &lt;- rnorm(10)) #&gt; [1] 1.5824059 1.1817680 0.1608777 0.2469118 -0.6086606 -0.7466633 -1.0254717 #&gt; [8] -0.6333350 -0.3989180 1.3663350 ifelse(x &gt; 0, x, -x) #&gt; [1] 1.5824059 1.1817680 0.1608777 0.2469118 0.6086606 0.7466633 1.0254717 0.6333350 #&gt; [9] 0.3989180 1.3663350 Beware with ifelse() (learn more there), for example ifelse(FALSE, 0, 1:5) #&gt; [1] 1 `if`(FALSE, 0, 1:5) #&gt; [1] 1 2 3 4 5 if (FALSE) 0 else 1:5 #&gt; [1] 1 2 3 4 5 3.4.5 Exercises Use sample(), rep_len() and split() to make a function that randomly splits some indices in a list of K groups of indices (like for cross-validation). [Which are the special cases that you should consider?] advr38pkg::split_ind(1:40, 3) #&gt; $`1` #&gt; [1] 4 6 7 12 17 18 22 23 27 29 30 31 33 35 #&gt; #&gt; $`2` #&gt; [1] 2 5 9 10 11 14 15 24 26 28 38 39 40 #&gt; #&gt; $`3` #&gt; [1] 1 3 8 13 16 19 20 21 25 32 34 36 37 Use replicate() and sample() to get a 95% confidence interval (using bootstrapping) for the mean of the following vector: set.seed(1) (x &lt;- rnorm(10)) #&gt; [1] -0.6264538 0.1836433 -0.8356286 1.5952808 0.3295078 -0.8204684 0.4874291 #&gt; [8] 0.7383247 0.5757814 -0.3053884 mean(x) #&gt; [1] 0.1322028 Expected output (approximately): #&gt; 2.5% 97.5% #&gt; -0.3145143 0.5998608 Use match() and some special accessor to add a column my_val to this data my_mtcars by putting the corresponding value of the column specified in my_col. [Can your solution be used for any number of column names?] my_mtcars &lt;- mtcars[c(&quot;mpg&quot;, &quot;hp&quot;)] my_mtcars$my_col &lt;- sample(c(&quot;mpg&quot;, &quot;hp&quot;), size = nrow(my_mtcars), replace = TRUE) head(my_mtcars) #&gt; mpg hp my_col #&gt; Mazda RX4 21.0 110 mpg #&gt; Mazda RX4 Wag 21.0 110 mpg #&gt; Datsun 710 22.8 93 hp #&gt; Hornet 4 Drive 21.4 110 hp #&gt; Hornet Sportabout 18.7 175 mpg #&gt; Valiant 18.1 105 hp Expected result (head): #&gt; mpg hp my_col my_val #&gt; Mazda RX4 21.0 110 mpg 21.0 #&gt; Mazda RX4 Wag 21.0 110 mpg 21.0 #&gt; Datsun 710 22.8 93 hp 93 #&gt; Hornet 4 Drive 21.4 110 hp 110 #&gt; Hornet Sportabout 18.7 175 mpg 18.7 #&gt; Valiant 18.1 105 hp 105 In the following data frame (recall that a data frame is also a list), for the first 3 columns, replace letters by corresponding numbers based on the code: df &lt;- data.frame( id1 = c(&quot;a&quot;, &quot;f&quot;, &quot;a&quot;), id2 = c(&quot;b&quot;, &quot;e&quot;, &quot;e&quot;), id3 = c(&quot;c&quot;, &quot;d&quot;, &quot;f&quot;), inter = c(7.343, 2.454, 3.234), stringsAsFactors = FALSE ) df #&gt; id1 id2 id3 inter #&gt; 1 a b c 7.343 #&gt; 2 f e d 2.454 #&gt; 3 a e f 3.234 (code &lt;- setNames(1:6, letters[1:6])) #&gt; a b c d e f #&gt; 1 2 3 4 5 6 Expected result: #&gt; id1 id2 id3 inter #&gt; 1 1 2 3 7.343 #&gt; 2 6 5 4 2.454 #&gt; 3 1 5 6 3.234 3.5 Environments and scoping Lexical scoping determines where to look for values, not when to look for them. R looks for values when the function is run, not when its created. This means that the output of a function can be different depending on objects outside its environment: h &lt;- function() { x &lt;- 10 f &lt;- function() { x + 1 } f() } x &lt;- 100 h() #&gt; [1] 11 Variable x is not defined inside f so R will look at the environment of f (where f was defined) and then at the parent environment, and so on. Here, the first x that is found has value 10. Be aware that for functions, packages environments are checked last so that you can redefine functions without noticing. c &lt;- function(...) paste0(...) c(1, 2, 3) #&gt; [1] &quot;123&quot; base::c(1, 2, 3) ## you need to explicit the package #&gt; [1] 1 2 3 rm(c) ## remove the new function from the environment c(1, 2, 3) #&gt; [1] 1 2 3 You can use the &lt;&lt;- operator to change the value of an object in an upper environment: count1 &lt;- 0 count2 &lt;- 0 f &lt;- function(i) { count1 &lt;- count1 + 1 ## will assign a new (temporary) count1 count2 &lt;&lt;- count2 + 1 ## will assign count2 on top i + 1 } sapply(1:10, f) #&gt; [1] 2 3 4 5 6 7 8 9 10 11 c(count1, count2) #&gt; [1] 0 10 Finally, how works the ...? Basically, you copy and paste what is put in ...: f1 &lt;- function(...) { list(...) } f1(a = 2, b = 3) #&gt; $a #&gt; [1] 2 #&gt; #&gt; $b #&gt; [1] 3 list(a = 2, b = 3) #&gt; $a #&gt; [1] 2 #&gt; #&gt; $b #&gt; [1] 3 Learn more about functions and scoping rules of R with the R Programming for Data Science book. 3.6 Attributes and classes Attributes are metadata associated with an object. You can get/set the list of attributes with attributes() or one particular attribute with attr(). attributes(iris) #&gt; $names #&gt; [1] &quot;Sepal.Length&quot; &quot;Sepal.Width&quot; &quot;Petal.Length&quot; &quot;Petal.Width&quot; &quot;Species&quot; #&gt; #&gt; $class #&gt; [1] &quot;data.frame&quot; #&gt; #&gt; $row.names #&gt; [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #&gt; [29] 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 #&gt; [ reached getOption(&quot;max.print&quot;) -- omitted 100 entries ] class(iris) #&gt; [1] &quot;data.frame&quot; attr(iris, &quot;row.names&quot;) #&gt; [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #&gt; [29] 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 #&gt; [ reached getOption(&quot;max.print&quot;) -- omitted 100 entries ] You can use structure() to create an object and add some arbitrary attributes. structure(1:10, my_fancy_attribute = &quot;blabla&quot;) #&gt; [1] 1 2 3 4 5 6 7 8 9 10 #&gt; attr(,&quot;my_fancy_attribute&quot;) #&gt; [1] &quot;blabla&quot; There are also some attributes with specific accessor functions to get and set values. For example, use names(x), dim(x) and class(x) instead of attr(x, \"names\"), attr(x, \"dim\") and attr(x, \"class\"). class(mylm &lt;- lm(Sepal.Length ~ ., data = iris)) #&gt; [1] &quot;lm&quot; Ive just fitted a linear model in order to predict the sepal length variable of the iris dataset based on the other variables. Using lm() gets me an object of class lm. What are the methods I can use for this object? methods(class = class(mylm)) #&gt; [1] add1 alias anova case.names coerce #&gt; [6] confint cooks.distance deviance dfbeta dfbetas #&gt; [11] drop1 dummy.coef effects extractAIC family #&gt; [16] formula hatvalues influence initialize kappa #&gt; [21] labels logLik model.frame model.matrix nobs #&gt; [26] plot predict print proj qr #&gt; [31] residuals rstandard rstudent show simulate #&gt; [36] slotsFromS3 summary variable.names vcov #&gt; see &#39;?methods&#39; for accessing help and source code summary(mylm) #&gt; #&gt; Call: #&gt; lm(formula = Sepal.Length ~ ., data = iris) #&gt; #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -0.79424 -0.21874 0.00899 0.20255 0.73103 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 2.17127 0.27979 7.760 1.43e-12 *** #&gt; Sepal.Width 0.49589 0.08607 5.761 4.87e-08 *** #&gt; Petal.Length 0.82924 0.06853 12.101 &lt; 2e-16 *** #&gt; Petal.Width -0.31516 0.15120 -2.084 0.03889 * #&gt; Speciesversicolor -0.72356 0.24017 -3.013 0.00306 ** #&gt; Speciesvirginica -1.02350 0.33373 -3.067 0.00258 ** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 0.3068 on 144 degrees of freedom #&gt; Multiple R-squared: 0.8673, Adjusted R-squared: 0.8627 #&gt; F-statistic: 188.3 on 5 and 144 DF, p-value: &lt; 2.2e-16 plot(mylm) R has the easiest way to create a class and to use methods on objects of this class; it is called S3. If you want to know more about the other types of classes, see the Advanced R book. agent007 &lt;- list(first = &quot;James&quot;, last = &quot;Bond&quot;) agent007 #&gt; $first #&gt; [1] &quot;James&quot; #&gt; #&gt; $last #&gt; [1] &quot;Bond&quot; class(agent007) &lt;- &quot;Person&quot; ## &quot;agent007&quot; is now an object of class &quot;Person&quot; # Just make a function called &lt;method_name&gt;.&lt;class_name&gt;() print.Person &lt;- function(x) { print(glue::glue(&quot;My name is {x$last}, {x$first} {x$last}.&quot;)) invisible(x) } agent007 #&gt; My name is Bond, James Bond. # Constructor of class as simple function Person &lt;- function(first, last) { structure(list(first = first, last = last), class = &quot;Person&quot;) } (me &lt;- Person(&quot;Florian&quot;, &quot;Privé&quot;)) #&gt; My name is Privé, Florian Privé. An object can have many classes: Worker &lt;- function(first, last, job) { obj &lt;- Person(first, last) obj$job &lt;- job class(obj) &lt;- c(&quot;Worker&quot;, class(obj)) obj } print.Worker &lt;- function(x) { print.Person(x) print(glue::glue(&quot;I am a {x$job}.&quot;)) invisible(x) } (worker_007 &lt;- Worker(&quot;James&quot;, &quot;Bond&quot;, &quot;secret agent&quot;)) #&gt; My name is Bond, James Bond. #&gt; I am a secret agent. (worker_me &lt;- Worker(&quot;Florian&quot;, &quot;Privé&quot;, &quot;postdoc&quot;)) #&gt; My name is Privé, Florian Privé. #&gt; I am a postdoc. "],["tidyverse.html", "Chapter 4 Data analysis with the tidyverse 4.1 Program 4.2 Other chapters from this book 4.3 Other resources 4.4 Other tidy packages", " Chapter 4 Data analysis with the tidyverse The tidyverse is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures. For learning how to do data analysis from importing data and tidying it to analyzing it and reporting results, we will use book R for Data Science. You can find most of the exercise solutions there. 4.1 Program my {R Markdown} presentation (also see https://r4ds.had.co.nz/r-markdown.html) my {ggplot2} presentation + data visualization with {ggplot2} tibbles data transformation with {dplyr} tidy data will rationalize the concept of tidy data that is used in the tidyverse and that is easier to work with relational data will give you tools to join information from several datasets more if time allows it (see below) 4.2 Other chapters from this book The other chapters of R for Data Science book are very interesting and you should read them. Unfortunately, we wont have time to cover them in class. A brief introduction of what you could learn: data import will give you tools to import data (e.g. as a replacement of read.table) strings will help you work with strings and regular expressions factors will help you work with factors dates and times will help you work with dates and times many models will introduce the concept of list-columns that enable you to store complex objects in a structured way inside a data frame databases: packages {DBI} and {dbplyr} + RStudios webpage 4.3 Other resources [IN FRENCH] introduction à R et au tidyverse comparing dplyr functions to their base R equivalents summarize and mutate multiple columns why use purrr::map instead of lapply? reorder those bars the lesser known stars of the tidyverse summary statistics of variables live data analysis by Hadley 4.4 Other tidy packages analysis of text data: package {tidytext} with the associated book, analysis of financial data: package {tidyquant}, analysis of time series data: package {tidytime}, a collection of packages for modeling and machine learning using tidyverse principles: package {tidymodels}, a tidy API for graph manipulation: package {tidygraph}, many other packages.. "],["performance.html", "Chapter 5 Performance 5.1 Rs memory management 5.2 Early advice 5.3 Vectorization 5.4 Rcpp 5.5 Linear algebra 5.6 Algorithms &amp; data structures 5.7 Exercises 5.8 Parallel", " Chapter 5 Performance Some resources used here or for further reading: Advanced R Efficient R programming The people who say that R is just always slow are usually not great R programmers. It is true that writing inefficient R code is easy, yet writing efficient R code is also possible when you know what youre doing. In this chapter, you will learn how to write R(cpp) code that is fast. 5.1 Rs memory management See this chapter of Advanced R. 5.2 Early advice 5.2.1 NEVER GROW A VECTOR Example computing the cumulative sums of a vector: x &lt;- rnorm(1e4) # Try also with n = 1e5 system.time({ current_sum &lt;- 0 res &lt;- c() for (x_i in x) { current_sum &lt;- current_sum + x_i res &lt;- c(res, current_sum) } }) #&gt; user system elapsed #&gt; 0.09 0.00 0.09 Here, at each iteration, you are reallocating a vector (of increasing size). Allocation of memory takes time as well as computations. This makes your code quadratic with the size of x (if you multiply the size of x by 2, you can expect the execution time to be multiplied by 4, for large sample sizes), whereas it should be only linear. A good solution is to always pre-allocate your results (if you know the size): system.time({ current_sum &lt;- 0 res2 &lt;- double(length(x)) for (i in seq_along(x)) { current_sum &lt;- current_sum + x[i] res2[i] &lt;- current_sum } }) #&gt; user system elapsed #&gt; 0 0 0 all.equal(res2, res) #&gt; [1] TRUE If you dont know the size of the results, you can store them in a list and merge them afterwards: system.time({ current_sum &lt;- 0 res3 &lt;- list() for (i in seq_along(x)) { current_sum &lt;- current_sum + x[i] res3[[i]] &lt;- current_sum } }) #&gt; user system elapsed #&gt; 0 0 0 all.equal(unlist(res3), res) #&gt; [1] TRUE With recent versions of R (&gt;= 3.4), you can efficiently grow a vector using system.time({ current_sum &lt;- 0 res4 &lt;- c() for (i in seq_along(x)) { current_sum &lt;- current_sum + x[i] res4[i] &lt;- current_sum } }) #&gt; user system elapsed #&gt; 0 0 0 all.equal(res4, res) #&gt; [1] TRUE Assigning to an element of a vector beyond the current length now over-allocates by a small fraction. The new vector is marked internally as growable, and the true length of the new vector is stored in the truelength field. This makes building up a vector result by assigning to the next element beyond the current length more efficient, though pre-allocating is still preferred. The implementation is subject to change and not intended to be used in packages at this time. (NEWS) An even better solution would be to avoid the loop by using a vectorized function: system.time(res5 &lt;- cumsum(x)) #&gt; user system elapsed #&gt; 0 0 0 all.equal(res5, res) #&gt; [1] TRUE x &lt;- rnorm(1e7) system.time(cumsum(x)) #&gt; user system elapsed #&gt; 0.05 0.00 0.05 As a second example, let us generate a matrix of uniform values (max changing for every column): n &lt;- 1e3 max &lt;- 1:1000 system.time({ mat &lt;- NULL for (m in max) { mat &lt;- cbind(mat, runif(n, max = m)) } }) #&gt; user system elapsed #&gt; 0.66 0.14 0.79 apply(mat, 2, max)[1:10] #&gt; [1] 0.9990033 1.9947379 2.9966283 3.9979628 4.9952530 5.9998482 6.9988867 7.9914421 #&gt; [9] 8.9975518 9.9997234 So, we can either pre-allocate a list or a matrix: system.time({ l &lt;- vector(&quot;list&quot;, length(max)) for (i in seq_along(max)) { l[[i]] &lt;- runif(n, max = max[i]) } mat2 &lt;- do.call(&quot;cbind&quot;, l) }) #&gt; user system elapsed #&gt; 0.03 0.00 0.03 apply(mat2, 2, max)[1:10] #&gt; [1] 0.9977958 1.9993057 2.9980112 3.9947798 4.9936573 5.9955111 6.9949959 7.9991962 #&gt; [9] 8.9704675 9.9882626 system.time({ mat3 &lt;- matrix(0, n, length(max)) for (i in seq_along(max)) { mat3[, i] &lt;- runif(n, max = max[i]) } }) #&gt; user system elapsed #&gt; 0.04 0.00 0.04 apply(mat3, 2, max)[1:10] #&gt; [1] 0.9995909 1.9981943 2.9992271 3.9902041 4.9961783 5.9956276 6.9959661 7.9996706 #&gt; [9] 8.9962345 9.9832806 What is nice with using a list is that you dont need to pre-allocate. Indeed, as opposed to atomic vectors, each element of a list is in different places in memory so that you dont have to reallocate all the data when you add an element to a list. system.time({ l &lt;- list() for (i in seq_along(max)) { l[[i]] &lt;- runif(n, max = max[i]) } mat4 &lt;- do.call(&quot;cbind&quot;, l) }) #&gt; user system elapsed #&gt; 0.03 0.00 0.03 apply(mat4, 2, max)[1:10] #&gt; [1] 0.9995388 1.9955198 2.9997691 3.9987404 4.9922388 5.9898789 6.9971913 7.9992277 #&gt; [9] 8.9981424 9.9906220 Instead of pre-allocating yourself, you can use sapply (or lapply and calling do.call() after, as previously done): system.time( mat4 &lt;- sapply(max, function(m) runif(n, max = m)) ) #&gt; user system elapsed #&gt; 0.03 0.00 0.03 apply(mat4, 2, max)[1:10] #&gt; [1] 0.9996156 1.9989325 2.9964446 3.9933756 4.9968914 5.9902297 6.9989946 7.9964186 #&gt; [9] 8.9832429 9.9785801 Dont listen to people telling you that sapply() is a vectorized operation that is so much faster than loops. 5.2.2 Use the right function Often, in order to optimize your code, you can simply find the right function to do what you need to do. For example, using rowMeans(x) instead of apply(x, 1, mean) can save you a lot of time. For example, if you want more efficient functions that apply to rows and columns of matrices, you can check package {matrixStats}. Another example is when reading large text files; in such cases, prefer using data.table::fread() rather than read.table(). Generally, packages that uses C/Rcpp are efficient. 5.2.3 Do not try to optimize everything Programmers waste enormous amounts of time thinking about, or worrying about, the speed of noncritical parts of their programs, and these attempts at efficiency actually have a strong negative impact when debugging and maintenance are considered.  Donald Knuth. If you try to optimize each and every part of your code, you will end up losing a lot of time writing it and it will probably less readable. R is great at prototyping quickly because you can write code in a concise and easy way. Begin by doing just that. If performance matters, then profile your code to see which part of your code is taking too much time and optimize only this part! Learn more on how to profile your code in RStudio in this article. 5.3 Vectorization See this great blog post by Noam Ross to understand vectorization. 5.3.1 Exercise Monte-Carlo integration (example from book Efficient R programming) Suppose we wish to estimate the integral \\(\\int_0^1 x^2 dx\\) using a Monte-Carlo method. Essentially, we throw darts at the curve and count the number of darts that fall below the curve (as in the following figure). Monte Carlo Integration pseudo-code Initialize: hits = 0 for i in 1:N \\(~~\\) Generate two random numbers, \\(U_1\\) and \\(U_2\\), between 0 and 1 \\(~~\\) If \\(U_2 &lt; U_1^2\\), then hits = hits + 1 end for Area estimate = hits / N Naively implementing this Monte-Carlo algorithm in R would typically lead to something like: monte_carlo &lt;- function(N) { hits &lt;- 0 for (i in seq_len(N)) { u1 &lt;- runif(1) u2 &lt;- runif(1) if (u1 ^ 2 &gt; u2) { hits &lt;- hits + 1 } } hits / N } This takes a few seconds for N = 1e6: N &lt;- 1e6 system.time(monte_carlo(N)) #&gt; user system elapsed #&gt; 2.50 0.03 2.55 Your task: Find a vectorized solution for this problem: system.time(monte_carlo_vec(N)) #&gt; user system elapsed #&gt; 0.05 0.00 0.05 5.4 Rcpp See this presentation. You have this data and this working code (a loop) that is slow mydf &lt;- readRDS(system.file(&quot;extdata/one-million.rds&quot;, package = &quot;advr38pkg&quot;)) QRA_3Dmatrix &lt;- array(0, dim = c(max(mydf$ID), max(mydf$Volume), 2)) for (i in seq_len(nrow(mydf))) { # Row corresponds to IDcell row &lt;- mydf[[i, 1]] # Column corresponds to the volume class column &lt;- mydf[[i, 3]] # Number of events, initially zero, then +1 QRA_3Dmatrix[row, column, 1] &lt;- QRA_3Dmatrix[row, column, 1] + 1 # Sum energy QRA_3Dmatrix[row, column, 2] &lt;- QRA_3Dmatrix[row, column, 2] + 1 - 1.358 / (1 + exp( (1000 * mydf[[i, 2]] - 129000) / 120300 )) } Rewrite this for-loop with Rcpp. You can also try to use {dplyr} for this problem. 5.5 Linear algebra In R, prefer using crossprod(X) and tcrossprod(X) instead of t(X) %*% X and X %*% t(X). Also using A %*% (B %*% y) and solve(A, y) will be faster than A %*% B %*% y and solve(A) %*% y. Dont re-implement linear algebra operations (such as matrix products) yourself. There exist some highly optimized libraries for this. If you want to use linear algebra in Rcpp, try RcppArmadillo or RcppEigen. If you want to use some optimized multi-threaded linear library, you can try Microsoft R Open. 5.5.1 Exercises Compute the Euclidean distances between each of row of X and each row of Y: set.seed(1) X &lt;- matrix(rnorm(1000), ncol = 5) Y &lt;- matrix(rnorm(5000), ncol = 5) A naive implementation would be: system.time({ dist &lt;- matrix(NA_real_, nrow(X), nrow(Y)) for (i in seq_len(nrow(X))) { for (j in seq_len(nrow(Y))) { dist[i, j] &lt;- sqrt(sum((X[i, ] - Y[j, ])^2)) } } }) #&gt; user system elapsed #&gt; 0.24 0.00 0.24 A possible faster solution takes #&gt; user system elapsed #&gt; 0 0 0 Rewrite this problem to use linear algebra instead of a loop (Hint: resize the 3-dimensional arrays as 2D matrices): N &lt;- 1e5 x &lt;- rnorm(N*3*3); dim(x) &lt;- c(N,3,3) y &lt;- rnorm(N*3*3); dim(y) &lt;- c(N,3,3) system.time({ gg &lt;- 0 for (n in 1:dim(x)[1]){ gg &lt;- gg + t(x[n,,]) %*% y[n,,] } }) #&gt; user system elapsed #&gt; 0.49 0.05 0.53 A possible faster solution takes #&gt; user system elapsed #&gt; 0 0 0 5.6 Algorithms &amp; data structures Sometimes, getting the right data structure (e.g. using a matrix instead of a data frame or integers instead of characters) can save you some computation time. Is your algorithm doing some redundant computations making it e.g. quadratic instead of linear with respect to the dimension of your data? See exercises (section 5.7) for some insights. You can also find a detailed example in this blog post. 5.7 Exercises Generate \\(10^8\\) (begin with \\(10^4\\)) steps of the process described by the formula:\\[X(0)=0\\]\\[X(t+1)=X(t)+Y(t)\\] where \\(Y(t)\\) are independent random variables with the distribution \\(N(0,1)\\). Then, calculate in what percentage of indices \\(t\\) the value of \\(X(t)\\) was negative. You dont need to store values of \\(X\\) if you dont want to. What would be the benefit of writing an Rcpp function over a simple vectorized R function? set.seed(1) system.time(p &lt;- advr38pkg::random_walk_neg_prop(1e7)) #&gt; user system elapsed #&gt; 0.36 0.02 0.37 p #&gt; [1] 0.3400444 mat &lt;- as.matrix(mtcars) ind &lt;- seq_len(nrow(mat)) mat_big &lt;- mat[rep(ind, 1000), ] ## 1000 times bigger dataset last_row &lt;- mat_big[nrow(mat_big), ] Speed up these loops: system.time({ for (j in 1:ncol(mat_big)) { for (i in 1:nrow(mat_big)) { mat_big[i, j] &lt;- 10 * mat_big[i, j] * last_row[j] } } }) #&gt; user system elapsed #&gt; 0.36 0.00 0.36 Why colSums() on a whole matrix is faster than on only half of it? m0 &lt;- matrix(rnorm(1e6), 1e3, 1e3) microbenchmark::microbenchmark( colSums(m0[, 1:500]), colSums(m0) ) #&gt; Unit: microseconds #&gt; expr min lq mean median uq max neval #&gt; colSums(m0[, 1:500]) 1419.4 1787.65 1979.024 1830.60 1904.00 8656.8 100 #&gt; colSums(m0) 763.9 807.85 873.664 827.55 858.65 2130.4 100 Try to speed up this code by vectorizing it first. Then, recode it in Rcpp and benchmark all the solutions you came up with. M &lt;- 50 step1 &lt;- runif(M) A &lt;- rnorm(M) N &lt;- 1e4 tau &lt;- matrix(0, N + 1, M) tau[1, ] &lt;- A for (j in 1:M) { for (i in 2:nrow(tau)) { tau[i, j] &lt;- tau[i - 1, j] + step1[j] * 1.0025^(i - 2) } } Make a fast function that counts the number of elements between a sequence of breaks. Can you do it in base R? Try also implementing it in Rcpp. How can you implement a solution whose computation time doesnt depend on the number of breaks? [Which are the special cases that you should consider?] x &lt;- sample(10, size = 1e4, replace = TRUE) breaks &lt;- c(1, 3, 9, 9.5, 10) table(cut(x, breaks)) #&gt; #&gt; (1,3] (3,9] (9,9.5] (9.5,10] #&gt; 2006 5997 0 944 hist(x, breaks, plot = FALSE)$counts # includes first break #&gt; [1] 3059 5997 0 944 advr38pkg::count_by_breaks(x, breaks) #&gt; [1] 2006 5997 0 944 advr38pkg::count_by_breaks_fast(x, breaks) #&gt; [1] 2006 5997 0 944 microbenchmark::microbenchmark( table(cut(x, breaks)), hist(x, breaks, plot = FALSE)$counts, advr38pkg::count_by_breaks(x, breaks), advr38pkg::count_by_breaks_fast(x, breaks) ) #&gt; Unit: microseconds #&gt; expr min lq mean median uq max #&gt; table(cut(x, breaks)) 650.3 698.75 822.415 817.50 851.90 1326.9 #&gt; hist(x, breaks, plot = FALSE)$counts 283.4 311.60 357.663 351.35 382.05 755.5 #&gt; advr38pkg::count_by_breaks(x, breaks) 262.6 344.15 420.802 390.55 424.50 4112.2 #&gt; advr38pkg::count_by_breaks_fast(x, breaks) 151.5 183.75 205.426 195.00 209.45 336.3 #&gt; neval #&gt; 100 #&gt; 100 #&gt; 100 #&gt; 100 x2 &lt;- sample(10, size = 1e5, replace = TRUE) breaks2 &lt;- seq(0, 10, length.out = 100) microbenchmark::microbenchmark( advr38pkg::count_by_breaks(x2, breaks), advr38pkg::count_by_breaks_fast(x2, breaks), advr38pkg::count_by_breaks(x2, breaks2), advr38pkg::count_by_breaks_fast(x2, breaks2) ) #&gt; Unit: milliseconds #&gt; expr min lq mean median #&gt; advr38pkg::count_by_breaks(x2, breaks) 2.4547 2.49165 2.734437 2.53315 #&gt; advr38pkg::count_by_breaks_fast(x2, breaks) 1.1389 1.16740 1.317822 1.22795 #&gt; advr38pkg::count_by_breaks(x2, breaks2) 89.4837 90.80580 93.249831 91.23050 #&gt; advr38pkg::count_by_breaks_fast(x2, breaks2) 1.1583 1.18855 1.264271 1.24435 #&gt; uq max neval #&gt; 2.75105 5.0151 100 #&gt; 1.30285 6.3222 100 #&gt; 92.21150 123.9045 100 #&gt; 1.28480 1.7095 100 An R user wants to implement some sampling on a sparse matrix and provides this working code: library(Matrix) N &lt;- 100 m &lt;- Matrix(0, nrow = N, ncol = N) for (j in 1:N) { cols &lt;- sample((1:N)[-j], 2) # 2 columns != j m[j, cols] &lt;- 1 } This code is slow; can you find two major reasons why? How can you more efficiently assign 1s? Can you use sampling with replacement (which can be easily vectorized) in this example? Implement faster solutions in R and Rcpp. Make a fast function that returns all prime numbers up to a number N. N &lt;- 1e6 system.time( primes &lt;- advr38pkg::AllPrimesUpTo(N) ) #&gt; user system elapsed #&gt; 0.03 0.00 0.03 plot(primes, pch = 20, cex = 0.5) 5.8 Parallel I basically always use foreach and recommend to do so. See my guide to parallelism in R with foreach. Just remember to optimize your code before trying to parallelize it. Try to parallelize some of your best solutions for the previous exercises. "],["packages.html", "Chapter 6 Packages 6.1 Resources 6.2 Project exercise 6.3 Quick start 6.4 Basic stuff 6.5 Other stuff 6.6 Good practices 6.7 Release on CRAN", " Chapter 6 Packages 6.1 Resources R Packages book (read it!) Writing R extensions, the official CRAN guide Look at popular R packages on GitHub Customizing Package Build Options Mastering Software Development in R How to develop good R packages (for open science) How to decide when to trust an R package? 6.2 Project exercise Just to experiment with making an R package, well try to make a small package that implements some of the features of package {dplyr} that we learned in chapter 4. We can call this package {minidplyr}. You can see the version I ended up with. After having read the following two sections (6.3 and 6.4), create a first function that helps you select variables of a data frame by using a character vector of variable names or an integer vector of variable positions. Which accessor could you use? Document this function and use it. Bonus: can you use base R function subset to use variables names without quoting them? Check your package with Ctrl/Cmd + Shift + E and fix all problems. At this point, the only problem should be a WARNING that just says to you that you need to fill the DESCRIPTION file with proper information. Do that and run checks again. You could submit this package to CRAN in its present form; congratulations on your new R package! Learn how to make unit tests in section 6.5.1 and do that for your new function select2. Which silly cases you should test? Here, you can use usethis::use_package(\"dplyr\", type = \"Suggests\") to add package {dplyr} to the suggested packages (because you will use this package in tests only). Make a function filter2 that enables to filter rows of a data frame. Add some documentation and tests for this function as well. Learn about continuous checking of your package in section 6.6.1. Follow the instructions, commit and push your changes. Go check your new badges on GitHub! Learn how to make a website out of your package in section 6.6.2 and build one for this package (or another of your packages). Implement more functions if you find this project interesting. For example, make a function mutate2 with the help of base R function transform (or within). Try to make the previous functions more general by taking many arguments at once (in ...). Make sure to keep your existing code as internal functions in order to break your code in manageable parts. 6.3 Quick start In my first package, I just put some functions I used again and again in my work. To quickly start your package, just follow these steps: Create an RStudio project (not a package). Here, I advise you to create a new project on GitHub and then to clone it as an RStudio project. It is a good practice to put all your (public) stuff on GitHub (as we learned in section 2.3). Run the following lines of R code. usethis::use_description() usethis::use_namespace() dir.create(&quot;R&quot;) usethis::use_package_doc() usethis::use_roxygen_md() Restart RStudio and change the following options. Then use Ctrl/Cmd + Shift + B to build and reload your package. Create a simple function and put it in an .R file in the R/ directory. Inside the function, use Code -&gt; Insert Roxygen Skeleton. Build and reload your package and check the documentation of your new function and that you can use it. 6.4 Basic stuff 6.4.1 DESCRIPTION file See this chapter. 6.4.2 R code Put your R code in the R/ directory. Basically it would be mostly functions. Dont use random lines of code like in R scripts. Never explicitly load a package with library() or require(). Use usethis::use_package() to add one package to your DESCRIPTION file. Then, refer to some function with &lt;package&gt;::&lt;function&gt;() in your code, or by using the @import &lt;package&gt; or @import &lt;package&gt; &lt;function&gt; roxygen tags. If one R function need another function in another R file, use the @import &lt;basename&gt;.R to make sure it is built and documented before (it is for example useful if you define new generics and methods in different files). If you modify global options() or graphics par(), save the old values and reset when youre done: old &lt;- options(stringsAsFactors = FALSE) on.exit(options(old), add = TRUE) 6.4.3 Documentation Documentation is super useful for other people (including future-you, in 6 months when you wont remember what you implemented in your package). Make sure to document your code as soon as you write it, otherwise you will never do it. Forget about the man/ (manual) directory, files in this directory will be automatically generated thanks to the roxygen comments you use on top of your R functions. Learn more with this chapter. Note that you can now use the Markdown syntax in the documentation. For example, instead of having to use \\code{foo}, you can use directly `foo` in the roxygen comments. To use (and export) functions already implemented in other packages, for example the pipe from package {magrittr}, you can use usethis::use_package(\"magrittr\") and put the following code somewhere in an R file of your package. #&#39; @importFrom magrittr %&gt;% #&#39; @export magrittr::`%&gt;%` Fun: [How to] Include a dancing banana in your R package documentation. 6.4.4 NAMESPACE file You can also forget about this for now because it should be automatically generated by {roxygen}. If you want to understand whats going on, read this chapter. 6.5 Other stuff 6.5.1 Testing You are probably already testing your code, youre only doing it informally. The problem with this approach is that when you come back to this code in 3 months time to add a new feature, youve probably forgotten some of the informal tests you ran the first time around. This makes it very easy to break code that used to work. A very good practice is to use unit tests. To make your first unit tests, use usethis::use_test() while having open the R file you want to test. Then, you can run tests of your package with Ctrl/Cmd + Shift + T. Learn more with this chapter. 6.5.2 Rcpp We learned about Rcpp in section 5.4. To use Rcpp code in your package, just use usethis::use_rcpp() and put the 2 roxygen tags e.g. in the file R/&lt;package&gt;-package.R. Then, create .cpp files with RStudio and save them the src/ directory. Note that the // [[Rcpp::export]] makes the C++ function available to R, it doesnt export the function as part of your package (though you could access it with &lt;package&gt;:::&lt;rcpp-fun&gt;()). If you want your package to explicitly provides an Rcpp function (as an R function), you also need roxygen comments (beginning with //' instead of #', including //' @export) on top of your Rcpp function. If you need some C++ code from another package (e.g. from package {RcppArmadillo}), normally you would use // [[Rcpp::depends(RcppArmadillo)]] #include &lt;RcppArmadillo.h&gt; In an R package, you dont need the first line but instead you need to add the package to the LinkingTo field of the DESCRIPTION file (e.g. with usethis::use_package(\"RcppArmadillo\", \"LinkingTo\")). 6.5.3 Ignore files There are two types of ignore: Files ignored by Git, specified in the .gitignore file. For example, you dont want to track changes for some large data files or some binaries often changing. You can ignore files by using usethis::use_git_ignore(). Files ignored during the build of your package, specified in the .Rbuildignore file. For example, in my packages, I generally have two directories called tmp-tests and tmp-save where I just put some random code that I used once during development. Checks will tell you if your package contains non-standard files or directories. Moreover, I generally ignore vignettes (well see how to build them as part of a website for your package with {pkgdown}). There is also a {usethis} function for this: usethis::use_build_ignore(). 6.5.4 The inst/ directory When a package is installed, everything in inst/ is copied into the top-level package directory. For example, you can have: inst/extdata/: additional external data for examples and vignettes. See section 6.5.5 for more detail. You can also use inst/testdata/ for data you need in tests. To access one file in this directory, use system.file(). For example, if you have a file inst/extdata/mydata.csv in your package, an user can find it using system.file(\"extdata\", \"mydata.csv\", package = \"mypackage\"). inst/include: some C++ code that others can use by LinkingTo your package. For example, when you use #include &lt;Rcpp.h&gt; at the top of your Rcpp code, youre using the code in there. inst/CITATION: how to cite the package. Learn more there. 6.5.5 External data Learn more with this book chapter. 6.6 Good practices 6.6.1 Continuous checking I would rarely trust a package that doesnt use these continuous integration services. Its good practice to check your package regularly and on different Operating Systems (OS). Learn more about the different checks there. An easy way to regularly check your package on GitHub is to use GitHub Actions. Indeed, each time you push to your GitHub repository, checks are run on different OS. To use this service, you can run usethis::use_github_action_check_standard(). To get the coverage of your tests, use Codecov by running usethis::use_coverage() and usethis::use_github_action(\"test-coverage\"). Finally, to prevent typos in your package and especially for non-native English speakers, it can be useful to check the spelling in your package. If you think that the word programmation exists and that prefered has only one r at the end (I did!), you should definitely use package {spelling}. Just run spelling::spell_check_setup(); this will check spelling in your package at the end of checks. If it reports words you want to ignore, just put these words in a text file inst/WORDLIST (with one word by line). 6.6.2 Pkgdown install R package {pkgdown} run usethis::use_pkgdown() run pkgdown:::build_site() and push the new files on GitHub, go to the settings of your repo, and enable GitHub Pages using the master branch /docs/ folder. This will render everything that you have in this folder as a website (after 0-2 minutes). To get more information and especially to configure the website, see the documentation, as a {pkgdown} website, of course. For an example, see the website of my package {bigstatsr} and the corresponding YAML file. If you want to make a personal website, check this quick tutorial. 6.7 Release on CRAN If you want your package to be on CRAN, read this chapter. "],["shiny.html", "Chapter 7 Shiny 7.1 Example 7.2 DataCamp course 7.3 Other resources", " Chapter 7 Shiny 7.1 Example You see my Shiny App for creating pixel art models. # Installation remotes::install_github(&quot;privefl/pixelart&quot;) # Run Shiny App pixelart::run_pixelart() 7.2 DataCamp course Let us use this free DataCamp course to learn the basics of Shiny. We wont use DataCamp for this course anymore because Please don't take or pay for my (DataCamp?) course. The company let its executive off the hook for sexual misconduct. We can't change behavior without incentives, and for companies those incentives are financial. https://t.co/UlTFXdoI6B #python #rstats #datascience #MeToo  Noam Ross ((noamross?)) 12 avril 2019 7.3 Other resources Mastering Shiny. Shiny website Shiny gallery Shiny themes Shiny tutorials Shiny dashboards Shiny widgets Advanced Shiny tips JavaScript operations in Shiny Getting Started with Shiny A gradual introduction to Shiny "]]
