[["tidytuesday.html", "Chapter 8 TidyTuesday 8.1 Loading TidyTuesday data Inspiration 8.2 Advanced R Project - TidyFriday", " Chapter 8 TidyTuesday TidyTuesday is a weekly social data project from the Data Science Learning Community (previously called R for data science (R4DS) Online Learning Community). The aim of this activity is for learners and mentors to gather and work through the book R for Data Science by Hadley Wickham; By doing so, help R learners understand how to summarize and arrange real-world data to make meaningful charts with ggplot2, tidyr, dplyr and other tools from the tidyverse. TidyTuesday started as a podcast (you can find the podcast online) and has now become a safe and supportive space for individuals to practice their wrangling and data visualization skills independent of drawing conclusions. Every Monday morning, a data set is posted to social media (on Mastodon, LinkedIn and GitHub). The data set always comes from some source article, which means that participants learn to work with real-world data. When the data has been posted to social media, all participants have time to explore the data, create visualizations, a model, a shiny app or some other data-science related output. In fact, participants do not have to use R; data-science-related output can be created in any programming language. Finally, participants can share their output and the code that they used to generate it on social media with the hash tag #TidyTuesday. The first TidyTuesday data project was released in April 2018, and included data on US Tuition Costs. Since then, the Data Science Learning Community has posted more than 300 data sets retrieved from a variety of sources and covering many different topics; From Star Trek Timelines, to CHIP data, UFO sightings, Superbowl commercials, Groundhog predictions, and many more. You can see the full list on the TidyTuesday GitHub repository. 8.1 Loading TidyTuesday data You can access any TidyTuesday data set with the package tidytuesdayR. tidytuesdayR includes several functions: -tt_available : Lists all data sets ever released by TidyTuesday - last_tuesday : Find the most recent TidyTuesday date - tt_download : Download one or more TidyTuesday files - tt_load : Load TidyTuesday data for a specified date from GitHub. For example, you can load the TidyTuesday data from 14 January 2020 using tidytuesdayR::tt_load(&quot;2020-01-14&quot;) If the data consists of more than one file, you can decide which files to download using the argument download_files: tidytuesdayR::tt_load(&quot;2020-05-05&quot;, download_files = &quot;villagers&quot;) Inspiration You can find inspiration from previous TidyTuesday projects online. Some examples are shown below: Jake Kaupp’s contribution on Chicago Bird Collisions: I want to see the source code! pacman::p_load(tidyverse, lubridate, here, patchwork) bird_collisions &lt;- read_csv(&quot;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-04-30/bird_collisions.csv&quot;) plot_data &lt;- bird_collisions %&gt;% filter(locality == &quot;CHI&quot;) %&gt;% mutate( month = month(date), year = year(date) ) %&gt;% unite(&quot;binomial_name&quot;, genus, species, sep = &quot; &quot;) %&gt;% count(year, month, binomial_name) %&gt;% complete(nesting(year, binomial_name), month = 1:12, fill = list(n = 0)) %&gt;% group_by(year, binomial_name) %&gt;% mutate(percent = n / sum(n)) %&gt;% mutate(percent = ifelse(is.nan(percent), 0, percent)) flower &lt;- ggplot(plot_data, aes(x = month, y = percent, fill = binomial_name)) + geom_area(size = 0, position = position_dodge(), alpha = 0.2) + scale_x_continuous(labels = month.abb, breaks = 1:12) + scale_y_continuous(limits = c(0, 1), breaks = c(0.5, 0.1)) + scale_fill_viridis_d(&quot;Year&quot;, option = &quot;plasma&quot;, direction = 1) + scale_color_viridis_d(option = &quot;plasma&quot;, direction = 1) + guides(fill = guide_colorbar()) + coord_polar() + labs( x = NULL, y = NULL, title = &quot;Overall&quot; ) + theme_minimal() + theme( axis.text.y = element_blank(), legend.position = &quot;none&quot;, panel.grid = element_line(color = &quot;#cccccc&quot;, size = 0.10), panel.grid.major.x = element_line(color = &quot;#cccccc&quot;, size = 0.10), panel.grid.major.y = element_blank(), panel.grid.minor = element_blank(), legend.background = element_blank(), legend.key = element_blank(), plot.background = element_rect(fill = &quot;white&quot;, color = &quot;white&quot;), text = element_text(color = &quot;black&quot;), axis.text = element_text(color = &quot;black&quot;), strip.text = element_text(hjust = 0, color = &quot;black&quot;, size = 10), axis.ticks = element_blank(), axis.ticks.x = element_blank(), axis.ticks.y = element_blank(), axis.text.x = element_text(color = &quot;black&quot;, margin = margin(t = 0.8 * 11 / 2)), # axis.text.y = element_text(color = &quot;black&quot;, margin = margin(t = 0.8 * 11/2)), axis.title = element_text(size = 9), axis.title.x = element_text(hjust = 0.5, size = 9), axis.title.y = element_text(hjust = 0.5, size = 9), plot.margin = margin(11 / 2, 11 / 2, 11 / 2, 11 / 2), plot.title = element_text(hjust = 0, size = 14, margin = margin(b = 10)), plot.subtitle = element_text(hjust = 0, size = 12, margin = margin(b = 15)), plot.caption = element_text(hjust = 1, size = 9, margin = margin(t = 10)) ) petals &lt;- flower + aes(group = year) + geom_path(aes(color = binomial_name), size = 0.2, show.legend = FALSE) + labs(title = &quot;By Species&quot;) + facet_wrap(~binomial_name, labeller = label_wrap_gen(10), nrow = 7) + theme( axis.text.x = element_blank(), axis.text.y = element_blank() ) legend &lt;- plot_data %&gt;% filter(binomial_name == &quot;Setophaga fusca&quot;) %&gt;% ggplot(aes(x = month, y = percent, fill = binomial_name, group = year)) + geom_area(size = 0, position = position_dodge(), alpha = 0.1) + geom_path(aes(color = binomial_name), size = 0.2, show.legend = FALSE) + annotate(&quot;text&quot;, x = 11, y = 0.8, label = &quot;One year of\\ncollisions in October&quot;, family = &quot;Scope One&quot;, size = 3, hjust = 0) + annotate(&quot;segment&quot;, x = 10.8, y = 0.8, xend = 10, yend = 0.8, arrow = arrow(length = unit(0.2, &quot;cm&quot;))) + annotate(&quot;text&quot;, x = 3.5, y = 0.8, label = &quot;Multiple years of\\ncollisions in May&quot;, family = &quot;Scope One&quot;, size = 3) + annotate(&quot;segment&quot;, x = 3.8, y = 0.8, xend = 5, yend = 0.8, arrow = arrow(length = unit(0.2, &quot;cm&quot;))) + scale_x_continuous(labels = month.abb, breaks = 1:12) + scale_y_continuous(limits = c(0, 1), breaks = c(0.5, 0.1)) + scale_fill_viridis_d(&quot;Year&quot;, option = &quot;plasma&quot;, direction = 1) + scale_color_viridis_d(option = &quot;plasma&quot;, direction = 1) + labs( x = NULL, y = NULL, title = &quot;How to Interpret This Chart&quot;, subtitle = str_wrap(&quot;A flower represents the recorded total collisions of each bird species with the individual petals representing the normalized events during each year (from 0-1). The position of the petals indicates the month or months collisions occur, with overlaps indicating repeated year-over-year collisions.&quot;, 70) ) + guides(fill = guide_colorbar()) + coord_polar(theta = &quot;x&quot;, start = 0) + theme_minimal() + theme( axis.text.y = element_blank(), panel.grid.major.y = element_line(color = &quot;#cccccc&quot;, size = 0.10), plot.title = element_text(hjust = 0, size = 14, margin = margin(b = 10)), legend.position = &quot;none&quot; ) out &lt;- wrap_plots(flower / legend, plot_spacer(), petals, ncol = 3, widths = c(1, 0.2, 2)) + plot_annotation( title = &quot;Seasonality of Bird Collisions in Chicago&quot;, subtitle = str_wrap(&quot;Presented below is a petal chart of of bird collisions, with instructions on how to interpret this chart in the lower left. The upper left flower represents collisions recorded across all years and species, with individual species presented as small multiple flowers on the right.&quot;, 220), caption = &quot;Data: Winger et al. (2019) Nocturnal flight-calling behaviour predicts vulnerability to artificial light in migratory birds. Proceedings of the Royal Society B 286(1900): 20190364. https://doi.org/10.1098/rspb.2019.0364 | Graphic: @jakekaupp&quot;, theme(plot.title.position = &quot;plot&quot;) ) Georgios Karamanis’ visualization of instant ramen reviews: I want to see the source code! pacman::p_load(tidyverse) ramen_ratings &lt;- readr::read_csv(&quot;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-06-04/ramen_ratings.csv&quot;) shio &lt;- ramen_ratings %&gt;% filter(country == &quot;Japan&quot;, str_detect(variety, &quot;Shio&quot;)) %&gt;% arrange(., stars) %&gt;% mutate(n = 1:n()) ggplot() + # chopstics geom_polygon(aes(x = c(-30, 32, 32, -30), y = c(0.02, 0.02, 0.1, 0.3)), fill = &quot;firebrick4&quot; ) + geom_polygon(aes(x = c(-30, 32, 32, -30), y = c(0.35, 0.12, 0.2, 0.63)), fill = &quot;firebrick4&quot; ) + # stars geom_text( aes( x = -20, y = c(1.1, 2.1, 3.1, 4.1, 5.1), label = c(&quot;1 star&quot;, &quot;2 stars&quot;, &quot;3 stars&quot;, &quot;4 stars&quot;, &quot;5 stars&quot;) ), color = &quot;gray85&quot;, size = 2, hjust = 0, family = &quot;IBM Plex Mono&quot; ) + geom_segment( aes( x = -20, y = c(0.99, 1.99, 2.99, 3.99, 4.99), xend = c(0.6, 1.6, 3.6, 9.6, 23.6), yend = c(0.99, 1.99, 2.99, 3.99, 4.99) ), color = &quot;gray85&quot;, size = 0.3, alpha = 0.5 ) + # 5 starred geom_text( data = shio, aes( x = n, y = -0.2, label = paste(brand, variety, sep = &quot; - &quot;) ), size = 1.8, family = &quot;IBM Plex Sans&quot;, hjust = 0, angle = 90, color = &quot;gray85&quot; ) + # ramen geom_col(data = shio, aes(n, stars), width = 0.5, fill = &quot;khaki&quot;) + scale_y_reverse( limits = c(8, -5), breaks = c(1, 2, 3, 4, 5), position = &quot;right&quot; ) + # title, subtitle and caption geom_text(aes(x = 32, y = 7.4, label = &quot;Ratings of Japanese Instant Shio Ramen&quot;), family = &quot;IBM Plex Serif SemiBold&quot;, hjust = 1, color = &quot;white&quot;, size = 4.5 ) + geom_text(aes(x = 32, y = 7.8, label = &quot;Source: TheRamenRater.com | Graphic: Georgios Karamanis&quot;), hjust = 1, color = &quot;white&quot;, size = 3 ) + theme_void() + theme( panel.background = element_rect(fill = &quot;#0881A3&quot;, color = &quot;#0881A3&quot;) ) Georgios Karamanis’ histogram of UFO sightings: I want to see the source code! pacman::p_load(tidyverse, here, ggimage) ufo_sightings &lt;- readr::read_csv(&quot;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-06-25/ufo_sightings.csv&quot;) city_count &lt;- ufo_sightings %&gt;% mutate(every_year = str_sub(date_time, -10, -7)) %&gt;% group_by(city_area) %&gt;% summarise(total = n(), first_encounter = min(every_year)) %&gt;% top_n(n = 10, total) %&gt;% mutate( year = as.numeric(first_encounter), city_area = str_to_title(city_area), city_area = fct_reorder(city_area, year) ) ggplot(city_count) + geom_segment( aes( x = city_area, y = year, xend = city_area, yend = 1970, size = total ), color = &quot;orange1&quot; ) + geom_image( aes( image = here(&quot;images&quot;, &quot;UFO_image.png&quot;), x = city_area, y = year - 0.8 ), asp = 1.4, size = 0.05, color = &quot;purple3&quot; ) + geom_text( aes( label = year, x = city_area, y = year - 3 ), color = &quot;grey40&quot;, size = 5, alpha = 0.6 ) + geom_text( aes( label = total, x = city_area, y = 1967.5 ), nudge_x = 0.37, size = 8, alpha = 0.7, color = &quot;orange1&quot; ) + geom_text( aes( label = &quot;year of first reported\\nencounter at the city&quot;, x = 3, y = 1941 ), color = &quot;grey60&quot;, size = 5, alpha = 0.9, hjust = 0 ) + geom_segment( aes( x = 2.8, y = 1941, xend = 1.4, yend = 1941 ), color = &quot;grey60&quot;, alpha = 0.5 ) + geom_text( aes( label = &quot;total number of encounters\\nduring all years&quot;, x = 8, y = 1950 ), color = &quot;orange1&quot;, size = 5, alpha = 0.2, hjust = 0 ) + geom_segment( aes( x = 7.8, y = 1950, xend = 6.4, yend = 1955 ), color = &quot;orange1&quot;, alpha = 0.2 ) + scale_y_reverse(position = &quot;right&quot;) + coord_cartesian(ylim = c(1940, 1967)) + geom_text( aes( label = &quot;Top 10 cities in the world with\\nthe most reported UFO encounters&quot;, x = 11, y = 1941 ), size = 8, hjust = 1 ) + labs( # title = &quot;Top 10 cities\\nin the world with\\nthe most reported\\nUFO encounters&quot;, caption = &quot;Source: NUFORC | Graphics: Georgios Karamanis&quot; ) + theme_minimal() + theme( plot.background = element_rect( fill = &quot;#e0e7f3&quot;, colour = &quot;#e0e7f3&quot; ), panel.grid = element_blank(), legend.position = &quot;&quot;, text = element_text(size = 14), axis.title = element_blank(), axis.text.y = element_blank(), axis.text.x = element_text(size = 14, hjust = 0.2, color = &quot;purple3&quot;), plot.margin = unit(c(1, 1, 1, 1), &quot;cm&quot;), plot.caption = element_text(margin = margin(40, 0, 0, 0), color = &quot;grey60&quot;) ) Dr. Torsten Sprenger’s visualizations of the gender bias in scientific publishing: I want to see the source code! pacman::p_load(tidyverse) raw_data &lt;- read_csv( paste0( &quot;https://raw.githubusercontent.com/rfordatascience/tidytuesday/&quot;, &quot;master/data/2019/2019-04-16/women_research.csv&quot; ) ) women_research &lt;- raw_data %&gt;% mutate( field = gsub(&quot;Women Inventores&quot;, &quot;Inventors&quot;, str_to_title(field)), percent_men = 1 - percent_women, women_ratio = ifelse(percent_women &lt; percent_men, &quot;less&quot;, &quot;not_less&quot;) ) %&gt;% pivot_longer( starts_with(&quot;percent&quot;), names_to = &quot;sex&quot;, values_to = &quot;percent&quot;, names_prefix = &quot;percent_&quot; ) women_field_averages &lt;- women_research %&gt;% filter(sex == &quot;women&quot;) %&gt;% group_by(field) %&gt;% summarize(avg_field_percent = mean(percent)) %&gt;% arrange(avg_field_percent) women_country_averages &lt;- women_research %&gt;% filter(sex == &quot;women&quot;) %&gt;% group_by(country) %&gt;% summarize(avg_country_percent = mean(percent)) %&gt;% arrange(avg_country_percent) plot &lt;- women_research %&gt;% mutate( field = factor(field, levels = women_field_averages$field), country = factor(country, levels = women_country_averages$country), sex_women_ratio = interaction(sex, women_ratio) ) %&gt;% ggplot() + geom_bar( aes(x = &quot;&quot;, y = percent, fill = sex_women_ratio, color = women_ratio), stat = &quot;identity&quot;, show.legend = FALSE ) + scale_fill_manual(values = c(&quot;#efefef&quot;, &quot;#333333&quot;, &quot;#efefef&quot;, &quot;#c54950&quot;)) + scale_color_manual(values = c(&quot;#333333&quot;, &quot;#c54950&quot;)) + coord_polar(&quot;y&quot;, start = 0) + facet_grid(field ~ country, switch = &quot;y&quot;) + labs( x = &quot;&quot;, y = &quot;&quot;, title = &quot;Still a man&#39;s world&quot;, subtitle = paste( &quot;#tidytuesday 16|2019&quot;, &quot;women among researchers with papers published 2011-2015&quot;, sep = &quot; • &quot; ), caption = &quot;© 2019 spren9er&quot; ) plot + theme_minimal() + theme( panel.border = element_blank(), panel.grid = element_blank(), panel.spacing.x = unit(0.9, &quot;lines&quot;), panel.spacing.y = unit(0.9, &quot;lines&quot;), axis.title.x = element_blank(), axis.ticks.x = element_blank(), axis.text.x = element_blank(), strip.background = element_blank(), strip.text = element_text(size = 9, face = &quot;plain&quot;), strip.text.x = element_text(angle = 90, hjust = 0, margin = margin(b = 10)), strip.text.y = element_text( angle = 180, hjust = 1, margin = margin(r = 10) ), plot.title = element_text(face = &quot;bold&quot;, margin = margin(b = 7)), plot.subtitle = element_text(margin = margin(b = 20)), plot.caption = element_text( color = &quot;#333333&quot;, face = &quot;plain&quot;, size = 7, hjust = 1, margin = margin(t = 20) ) ) 8.2 Advanced R Project - TidyFriday Let’s make our own mini version of TidyTuesday. As you will present your results on Friday, we can call this project TidyFriday . Work together in teams of 2 (or 3). Choose a data set from the list of available TidyTuesday data sets (tidytuesdayR::tt_available()). Come up with a question or find interesting aspects to visualize. You can also recreate an existing visualization. Apply the functions you have learned in this course and try to learn new things to create an interesting plot. Share the resulting plot(s) and the code on GitHub. Friday afternoon, you will give a short presentation where you talk about challenges and conclusions from the plot. Presentation Make a short (5-10 min) presentation. You can simply make an HTML file from R Markdown and upload it to GitHub. The HTML file can then be previewed on http://htmlpreview.github.io/. The presentation should include: A short introduction to the data set and the variables you chose to visualize Your results and a discussion about the trends/patterns in the data If you chose to recreate a visualization, comment on the quality of the plot or potential problems The generative code and comments on the steps and transformations you applied to the data Potential other tidyverse functions or packages that were particularly useful Examples Below, you can find some examples from previous years: Alcohol Consumption LEGO sets F1 winners Baby Names UFO sightings Tornados Wealth Inequalities in the USA Eurovision Horror Movies A Package for Clinical Data A Package to read BAM files "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
