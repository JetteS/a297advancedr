[
["r-programming.html", "Chapter 3 R programming 3.1 Useful R base", " Chapter 3 R programming 3.1 Useful R base In this section, I mention some useful R base functions (also see this comprehensive list in French and this one): 3.1.1 General # To get some help ?topic #&gt; No documentation for &#39;topic&#39; in specified packages and libraries: #&gt; you could try &#39;??topic&#39; # Run code from the example section example(sum) #&gt; #&gt; sum&gt; ## Pass a vector to sum, and it will add the elements together. #&gt; sum&gt; sum(1:5) #&gt; [1] 15 #&gt; #&gt; sum&gt; ## Pass several numbers to sum, and it also adds the elements. #&gt; sum&gt; sum(1, 2, 3, 4, 5) #&gt; [1] 15 #&gt; #&gt; sum&gt; ## In fact, you can pass vectors into several arguments, and everything gets added. #&gt; sum&gt; sum(1:2, 3:5) #&gt; [1] 15 #&gt; #&gt; sum&gt; ## If there are missing values, the sum is unknown, i.e., also missing, .... #&gt; sum&gt; sum(1:5, NA) #&gt; [1] NA #&gt; #&gt; sum&gt; ## ... unless we exclude missing values explicitly: #&gt; sum&gt; sum(1:5, NA, na.rm = TRUE) #&gt; [1] 15 # Structure overview str(iris) #&gt; &#39;data.frame&#39;: 150 obs. of 5 variables: #&gt; $ Sepal.Length: num 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... #&gt; $ Sepal.Width : num 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... #&gt; $ Petal.Length: num 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... #&gt; $ Petal.Width : num 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... #&gt; $ Species : Factor w/ 3 levels &quot;setosa&quot;,&quot;versicolor&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... # List objects of environment a &lt;- 1:4; b &lt;- list() ls() #&gt; [1] &quot;a&quot; &quot;b&quot; # Remove objects from the environment rm(list = ls()) ## remove everything # list of available S3 methods methods(summary) #&gt; [1] summary.aov summary.aovlist* #&gt; [3] summary.aspell* summary.check_packages_in_dir* #&gt; [5] summary.connection summary.data.frame #&gt; [7] summary.Date summary.default #&gt; [9] summary.ecdf* summary.factor #&gt; [11] summary.glm summary.infl* #&gt; [13] summary.lm summary.loess* #&gt; [15] summary.manova summary.matrix #&gt; [17] summary.mlm* summary.nls* #&gt; [19] summary.packageStatus* summary.PDF_Dictionary* #&gt; [21] summary.PDF_Stream* summary.POSIXct #&gt; [23] summary.POSIXlt summary.ppr* #&gt; [25] summary.prcomp* summary.princomp* #&gt; [27] summary.proc_time summary.srcfile #&gt; [29] summary.srcref summary.stepfun #&gt; [31] summary.stl* summary.table #&gt; [33] summary.tukeysmooth* #&gt; see &#39;?methods&#39; for accessing help and source code methods(class = &quot;lm&quot;) #&gt; [1] add1 alias anova case.names #&gt; [5] confint cooks.distance deviance dfbeta #&gt; [9] dfbetas drop1 dummy.coef effects #&gt; [13] extractAIC family formula hatvalues #&gt; [17] influence kappa labels logLik #&gt; [21] model.frame model.matrix nobs plot #&gt; [25] predict print proj qr #&gt; [29] residuals rstandard rstudent simulate #&gt; [33] summary variable.names vcov #&gt; see &#39;?methods&#39; for accessing help and source code 3.1.2 Sequence and vector operations 1:10 ## integers #&gt; [1] 1 2 3 4 5 6 7 8 9 10 seq(1, 10, by = 2) #&gt; [1] 1 3 5 7 9 seq(1, 100, length.out = 10) #&gt; [1] 1 12 23 34 45 56 67 78 89 100 seq_len(5) #&gt; [1] 1 2 3 4 5 seq_along(5:8) #&gt; [1] 1 2 3 4 rep(1:4, 2) #&gt; [1] 1 2 3 4 1 2 3 4 rep(1:4, each = 2) #&gt; [1] 1 1 2 2 3 3 4 4 rep(1:4, 4:1) #&gt; [1] 1 1 1 1 2 2 2 3 3 4 rep_len(1:3, 7) #&gt; [1] 1 2 3 1 2 3 1 replicate(5, rnorm(10)) #&gt; [,1] [,2] [,3] [,4] [,5] #&gt; [1,] 2.8469288 -0.2986531 -1.5954034 -0.8203055 -0.1700280 #&gt; [2,] -0.3272313 -0.6468251 -0.1409556 0.2749724 0.1546141 #&gt; [3,] 1.9708992 -0.9592320 -0.4915291 -0.2828905 -0.4213828 #&gt; [4,] -1.6721745 -0.2300785 1.7642881 -2.0749603 -3.7108345 #&gt; [5,] 0.5727376 -1.2379536 -0.3235861 0.2145968 -0.5060227 #&gt; [6,] -1.1425487 2.7771582 0.7802247 1.5198868 -0.5403751 #&gt; [7,] -0.3936874 1.0026823 -0.1146455 0.4138021 0.9439736 #&gt; [8,] -0.1155423 1.6049259 0.3023413 0.2692244 0.2265371 #&gt; [9,] 0.6263451 -0.2035339 0.6596516 -0.2526148 0.7902564 #&gt; [10,] 0.6262937 1.1679965 1.5488529 1.0071896 -2.4404032 sort(c(1, 6, 8, 2, 2)) #&gt; [1] 1 2 2 6 8 order(c(1, 6, 8, 2, 2), c(0, 0, 0, 2, 1)) #&gt; [1] 1 5 4 2 3 sort(c(&quot;a1&quot;, &quot;a2&quot;, &quot;a10&quot;)) #&gt; [1] &quot;a1&quot; &quot;a10&quot; &quot;a2&quot; gtools::mixedsort(c(&quot;a1&quot;, &quot;a2&quot;, &quot;a10&quot;)) # not in base, obviously #&gt; [1] &quot;a1&quot; &quot;a2&quot; &quot;a10&quot; which.max(c(1, 5, 3, 6, 2, 0)) #&gt; [1] 4 which.min(c(1, 5, 3, 6, 2, 0)) #&gt; [1] 6 unique(c(1, NA, 2, 3, 2, NA, 3)) #&gt; [1] 1 NA 2 3 table(rep(1:4, 4:1)) #&gt; #&gt; 1 2 3 4 #&gt; 4 3 2 1 table(A = c(1, 1, 1, 2, 2), B = c(1, 2, 1, 2, 1)) #&gt; B #&gt; A 1 2 #&gt; 1 2 1 #&gt; 2 1 1 round(x &lt;- runif(10, max = 100)) #&gt; [1] 95 64 19 78 84 87 55 7 69 10 round(x, digits = 2) #&gt; [1] 95.08 63.78 19.21 78.14 84.17 87.36 55.37 6.97 68.94 10.09 round(x, -1) #&gt; [1] 100 60 20 80 80 90 60 10 70 10 pmin(1:4, 4:1) #&gt; [1] 1 2 2 1 pmax(1:4, 4:1) #&gt; [1] 4 3 3 4 outer(1:4, 1:3, &#39;+&#39;) #&gt; [,1] [,2] [,3] #&gt; [1,] 2 3 4 #&gt; [2,] 3 4 5 #&gt; [3,] 4 5 6 #&gt; [4,] 5 6 7 expand.grid(param1 = c(5, 50), param2 = c(1, 3, 10)) #&gt; param1 param2 #&gt; 1 5 1 #&gt; 2 50 1 #&gt; 3 5 3 #&gt; 4 50 3 #&gt; 5 5 10 #&gt; 6 50 10 3.1.3 Character operations paste(&quot;I&quot;, &quot;am&quot;, &quot;me&quot;) #&gt; [1] &quot;I am me&quot; paste0(&quot;test&quot;, 0) #&gt; [1] &quot;test0&quot; paste0(&quot;PC&quot;, 1:10) #&gt; [1] &quot;PC1&quot; &quot;PC2&quot; &quot;PC3&quot; &quot;PC4&quot; &quot;PC5&quot; &quot;PC6&quot; &quot;PC7&quot; &quot;PC8&quot; &quot;PC9&quot; &quot;PC10&quot; me &lt;- &quot;Florian&quot; glue::glue(&quot;I am {me}&quot;) ## not in base, but SO useful #&gt; I am Florian (x &lt;- list.files(pattern = &quot;\\\\.Rmd$&quot;)) #&gt; [1] &quot;01-intro.Rmd&quot; &quot;good-practices.Rmd&quot; &quot;index.Rmd&quot; #&gt; [4] &quot;intro.Rmd&quot; &quot;rprog.Rmd&quot; &quot;rstudio-git.Rmd&quot; sub(&quot;\\\\.Rmd$&quot;, &quot;.pdf&quot;, x) #&gt; [1] &quot;01-intro.pdf&quot; &quot;good-practices.pdf&quot; &quot;index.pdf&quot; #&gt; [4] &quot;intro.pdf&quot; &quot;rprog.pdf&quot; &quot;rstudio-git.pdf&quot; (y &lt;- sample(letters[1:4], 10, replace = TRUE)) #&gt; [1] &quot;a&quot; &quot;d&quot; &quot;b&quot; &quot;d&quot; &quot;d&quot; &quot;d&quot; &quot;b&quot; &quot;d&quot; &quot;d&quot; &quot;b&quot; match(y, letters[1:4]) #&gt; [1] 1 4 2 4 4 4 2 4 4 2 y %in% letters[1:2] #&gt; [1] TRUE FALSE TRUE FALSE FALSE FALSE TRUE FALSE FALSE TRUE rle(rep(1:4, 4:1)) #&gt; Run Length Encoding #&gt; lengths: int [1:4] 4 3 2 1 #&gt; values : int [1:4] 1 2 3 4 split(1:12, rep(letters[1:3], 4)) #&gt; $a #&gt; [1] 1 4 7 10 #&gt; #&gt; $b #&gt; [1] 2 5 8 11 #&gt; #&gt; $c #&gt; [1] 3 6 9 12 intersect(letters[1:4], letters[3:5]) #&gt; [1] &quot;c&quot; &quot;d&quot; union(letters[1:4], letters[3:5]) #&gt; [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; setdiff(letters[1:4], letters[3:5]) #&gt; [1] &quot;a&quot; &quot;b&quot; 3.1.4 Logical operators tryCatch(TRUE | stop(&quot;will go there&quot;), error = function(e) print(e)) #&gt; &lt;simpleError in doTryCatch(return(expr), name, parentenv, handler): will go there&gt; TRUE || stop(&quot;won&#39;t go there&quot;) #&gt; [1] TRUE c(TRUE, FALSE, TRUE, TRUE) &amp; c(FALSE, TRUE, TRUE, TRUE) #&gt; [1] FALSE FALSE TRUE TRUE c(TRUE, FALSE, TRUE, TRUE) &amp;&amp; c(FALSE, TRUE, TRUE, TRUE) ## no warning!! #&gt; [1] FALSE (x &lt;- rnorm(10)) #&gt; [1] -1.1132632 0.9556972 0.1896872 -0.8111298 -1.4110412 2.3903825 #&gt; [7] 0.6966170 -0.5907401 -1.2505774 0.2983525 ifelse(x &gt; 0, x, -x) #&gt; [1] 1.1132632 0.9556972 0.1896872 0.8111298 1.4110412 2.3903825 0.6966170 #&gt; [8] 0.5907401 1.2505774 0.2983525 Beware with ifelse() (learn more there), for example ifelse(FALSE, 0, 1:5) #&gt; [1] 1 `if`(FALSE, 0, 1:5) #&gt; [1] 1 2 3 4 5 3.1.5 Exercises TODO "]
]
